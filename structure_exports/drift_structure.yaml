project_info:
  name: "drift"
  path: "/Users/nijatburjiyev/Documents/drift"
  generatedAt: "2025-07-15T12:57:12.500447"
  totalFiles: 40
  totalSize: 165934
structure:
  "gradle":
    type: null
    info: null
    children:
      "wrapper":
        type: null
        info: null
        children:
          "gradle-wrapper.jar":
            type: "file"
            info:
              "size": "43764"
              "last_modified": "2025-07-15T12:57:12.346158"
              "mime_type": "application/java-archive"
              "extension": ".jar"
            children: null
          "gradle-wrapper.properties":
            type: "file"
            info:
              "size": "253"
              "last_modified": "2025-07-15T12:57:12.353308"
              "mime_type": "text/x-java-properties"
              "extension": ".properties"
            children: null
  "gradlew":
    type: "file"
    info:
      "size": "8733"
      "last_modified": "2025-07-15T12:57:12.36122"
      "mime_type": "application/x-sh"
      "extension": "."
    children: null
  ".gitignore":
    type: "file"
    info:
      "size": "444"
      "last_modified": "2025-07-15T12:57:12.363903"
      "mime_type": "text/plain"
      "extension": ".gitignore"
    children: null
  "build.gradle":
    type: "file"
    info:
      "size": "903"
      "last_modified": "2025-07-15T12:57:12.366534"
      "mime_type": "text/plain"
      "extension": ".gradle"
    children: null
  ".gitattributes":
    type: "file"
    info:
      "size": "54"
      "last_modified": "2025-07-15T12:57:12.368978"
      "mime_type": "text/plain"
      "extension": ".gitattributes"
    children: null
  ".gradle":
    type: null
    info: null
    children: {}
  "build":
    type: null
    info: null
    children: {}
  "gradlew.bat":
    type: "file"
    info:
      "size": "2937"
      "last_modified": "2025-07-15T12:57:12.375485"
      "mime_type": "application/x-bat"
      "extension": ".bat"
    children: null
  "settings.gradle":
    type: "file"
    info:
      "size": "27"
      "last_modified": "2025-07-15T12:57:12.378006"
      "mime_type": "text/plain"
      "extension": ".gradle"
    children: null
  "data":
    type: null
    info: null
    children:
      "redoak.trace.db":
        type: "file"
        info:
          "size": "15621"
          "last_modified": "2025-07-15T12:57:12.380481"
          "mime_type": "text/plain"
          "extension": ".db"
        children: null
      "redoak.mv.db":
        type: "file"
        info:
          "size": "24576"
          "last_modified": "2025-07-15T12:57:12.382964"
          "mime_type": "application/octet-stream"
          "extension": ".db"
        children: null
  "src":
    type: null
    info: null
    children:
      "test":
        type: null
        info: null
        children:
          "resources":
            type: null
            info: null
            children:
              "mock-groups.json":
                type: "file"
                info:
                  "size": "11076"
                  "last_modified": "2025-07-15T12:57:12.387877"
                  "mime_type": "text/plain"
                  "extension": ".json"
                children: null
              "mock-users.json":
                type: "file"
                info:
                  "size": "3546"
                  "last_modified": "2025-07-15T12:57:12.390468"
                  "mime_type": "text/plain"
                  "extension": ".json"
                children: null
              "mock-visibility-profiles.json":
                type: "file"
                info:
                  "size": "10848"
                  "last_modified": "2025-07-15T12:57:12.392948"
                  "mime_type": "text/plain"
                  "extension": ".json"
                children: null
          "java":
            type: null
            info: null
            children:
              "com":
                type: null
                info: null
                children:
                  "edwardjones":
                    type: null
                    info: null
                    children:
                      "drift":
                        type: null
                        info: null
                        children:
                          "batch":
                            type: null
                            info: null
                            children:
                              "ImportJobHappyPathTest.java":
                                type: "file"
                                info:
                                  "size": "4164"
                                  "last_modified": "2025-07-15T12:57:12.397535"
                                  "mime_type": "text/x-java-source"
                                  "extension": ".java"
                                children: null
      "main":
        type: null
        info: null
        children:
          "resources":
            type: null
            info: null
            children:
              "vendor-root.pem":
                type: "file"
                info:
                  "size": "2644"
                  "last_modified": "2025-07-15T12:57:12.412199"
                  "mime_type": "application/x-x509-cert; format=pem"
                  "extension": ".pem"
                children: null
              "application-dev.properties":
                type: "file"
                info:
                  "size": "315"
                  "last_modified": "2025-07-15T12:57:12.414611"
                  "mime_type": "text/x-java-properties"
                  "extension": ".properties"
                children: null
              "application.properties":
                type: "file"
                info:
                  "size": "936"
                  "last_modified": "2025-07-15T12:57:12.417184"
                  "mime_type": "text/x-java-properties"
                  "extension": ".properties"
                children: null
          "java":
            type: null
            info: null
            children:
              "com":
                type: null
                info: null
                children:
                  "edwardjones":
                    type: null
                    info: null
                    children:
                      "drift":
                        type: null
                        info: null
                        children:
                          "dto":
                            type: null
                            info: null
                            children:
                              "UserJson.java":
                                type: "file"
                                info:
                                  "size": "749"
                                  "last_modified": "2025-07-15T12:57:12.422001"
                                  "mime_type": "text/x-java-source"
                                  "extension": ".java"
                                children: null
                              "GroupJson.java":
                                type: "file"
                                info:
                                  "size": "436"
                                  "last_modified": "2025-07-15T12:57:12.424532"
                                  "mime_type": "text/x-java-source"
                                  "extension": ".java"
                                children: null
                              "VisibilityProfileJson.java":
                                type: "file"
                                info:
                                  "size": "1265"
                                  "last_modified": "2025-07-15T12:57:12.426987"
                                  "mime_type": "text/x-java-source"
                                  "extension": ".java"
                                children: null
                              "SubmissionTypeJson.java":
                                type: "file"
                                info:
                                  "size": "436"
                                  "last_modified": "2025-07-15T12:57:12.429485"
                                  "mime_type": "text/x-java-source"
                                  "extension": ".java"
                                children: null
                          "infra":
                            type: null
                            info: null
                            children:
                              "HttpConfig.java":
                                type: "file"
                                info:
                                  "size": "760"
                                  "last_modified": "2025-07-15T12:57:12.433941"
                                  "mime_type": "text/x-java-source"
                                  "extension": ".java"
                                children: null
                              "TokenService.java":
                                type: "file"
                                info:
                                  "size": "3602"
                                  "last_modified": "2025-07-15T12:57:12.436351"
                                  "mime_type": "text/x-java-source"
                                  "extension": ".java"
                                children: null
                          "DriftApplication.java":
                            type: "file"
                            info:
                              "size": "310"
                              "last_modified": "2025-07-15T12:57:12.440793"
                              "mime_type": "text/x-java-source"
                              "extension": ".java"
                            children: null
                          "batch":
                            type: null
                            info: null
                            children:
                              "JobExecutionMonitor.java":
                                type: "file"
                                info:
                                  "size": "1194"
                                  "last_modified": "2025-07-15T12:57:12.443218"
                                  "mime_type": "text/x-java-source"
                                  "extension": ".java"
                                children: null
                              "JobConfig.java":
                                type: "file"
                                info:
                                  "size": "5712"
                                  "last_modified": "2025-07-15T12:57:12.445635"
                                  "mime_type": "text/x-java-source"
                                  "extension": ".java"
                                children: null
                              "UserProcessor.java":
                                type: "file"
                                info:
                                  "size": "2421"
                                  "last_modified": "2025-07-15T12:57:12.448057"
                                  "mime_type": "text/x-java-source"
                                  "extension": ".java"
                                children: null
                              "SubmissionTypeProcessor.java":
                                type: "file"
                                info:
                                  "size": "1270"
                                  "last_modified": "2025-07-15T12:57:12.450569"
                                  "mime_type": "text/x-java-source"
                                  "extension": ".java"
                                children: null
                              "VisibilityProfileProcessor.java":
                                type: "file"
                                info:
                                  "size": "3124"
                                  "last_modified": "2025-07-15T12:57:12.453089"
                                  "mime_type": "text/x-java-source"
                                  "extension": ".java"
                                children: null
                              "GroupProcessor.java":
                                type: "file"
                                info:
                                  "size": "1245"
                                  "last_modified": "2025-07-15T12:57:12.455614"
                                  "mime_type": "text/x-java-source"
                                  "extension": ".java"
                                children: null
                              "RedOakStreamReader.java":
                                type: "file"
                                info:
                                  "size": "4723"
                                  "last_modified": "2025-07-15T12:57:12.458145"
                                  "mime_type": "text/x-java-source"
                                  "extension": ".java"
                                children: null
                          "domain":
                            type: null
                            info: null
                            children:
                              "Group.java":
                                type: "file"
                                info:
                                  "size": "799"
                                  "last_modified": "2025-07-15T12:57:12.462664"
                                  "mime_type": "text/x-java-source"
                                  "extension": ".java"
                                children: null
                              "VpGroupLink.java":
                                type: "file"
                                info:
                                  "size": "1572"
                                  "last_modified": "2025-07-15T12:57:12.465091"
                                  "mime_type": "text/x-java-source"
                                  "extension": ".java"
                                children: null
                              "User.java":
                                type: "file"
                                info:
                                  "size": "1800"
                                  "last_modified": "2025-07-15T12:57:12.467538"
                                  "mime_type": "text/x-java-source"
                                  "extension": ".java"
                                children: null
                              "SubmissionType.java":
                                type: "file"
                                info:
                                  "size": "949"
                                  "last_modified": "2025-07-15T12:57:12.469957"
                                  "mime_type": "text/x-java-source"
                                  "extension": ".java"
                                children: null
                              "VisibilityProfile.java":
                                type: "file"
                                info:
                                  "size": "1800"
                                  "last_modified": "2025-07-15T12:57:12.472388"
                                  "mime_type": "text/x-java-source"
                                  "extension": ".java"
                                children: null
                          "repo":
                            type: null
                            info: null
                            children:
                              "SubmissionTypeRepository.java":
                                type: "file"
                                info:
                                  "size": "242"
                                  "last_modified": "2025-07-15T12:57:12.476764"
                                  "mime_type": "text/x-java-source"
                                  "extension": ".java"
                                children: null
                              "VisibilityProfileRepository.java":
                                type: "file"
                                info:
                                  "size": "253"
                                  "last_modified": "2025-07-15T12:57:12.479134"
                                  "mime_type": "text/x-java-source"
                                  "extension": ".java"
                                children: null
                              "GroupRepository.java":
                                type: "file"
                                info:
                                  "size": "217"
                                  "last_modified": "2025-07-15T12:57:12.481488"
                                  "mime_type": "text/x-java-source"
                                  "extension": ".java"
                                children: null
                              "UserRepository.java":
                                type: "file"
                                info:
                                  "size": "214"
                                  "last_modified": "2025-07-15T12:57:12.483814"
                                  "mime_type": "text/x-java-source"
                                  "extension": ".java"
                                children: null
files:
- path: "gradle/wrapper/gradle-wrapper.properties"
  content: "distributionBase=GRADLE_USER_HOME\ndistributionPath=wrapper/dists\ndistributionUrl=https\\\
    ://services.gradle.org/distributions/gradle-8.14.3-bin.zip\nnetworkTimeout=10000\n\
    validateDistributionUrl=true\nzipStoreBase=GRADLE_USER_HOME\nzipStorePath=wrapper/dists\n"
  info:
    "size": "253"
    "last_modified": "2025-07-15T12:57:12.353308"
    "mime_type": "text/x-java-properties"
    "extension": ".properties"
- path: "gradlew"
  content: "#!/bin/sh\n\n#\n# Copyright © 2015-2021 the original authors.\n#\n# Licensed\
    \ under the Apache License, Version 2.0 (the \"License\");\n# you may not use\
    \ this file except in compliance with the License.\n# You may obtain a copy of\
    \ the License at\n#\n#      https://www.apache.org/licenses/LICENSE-2.0\n#\n#\
    \ Unless required by applicable law or agreed to in writing, software\n# distributed\
    \ under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES\
    \ OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for\
    \ the specific language governing permissions and\n# limitations under the License.\n\
    #\n# SPDX-License-Identifier: Apache-2.0\n#\n\n##############################################################################\n\
    #\n#   Gradle start up script for POSIX generated by Gradle.\n#\n#   Important\
    \ for running:\n#\n#   (1) You need a POSIX-compliant shell to run this script.\
    \ If your /bin/sh is\n#       noncompliant, but you have some other compliant\
    \ shell such as ksh or\n#       bash, then to run this script, type that shell\
    \ name before the whole\n#       command line, like:\n#\n#           ksh Gradle\n\
    #\n#       Busybox and similar reduced shells will NOT work, because this script\n\
    #       requires all of these POSIX shell features:\n#         * functions;\n\
    #         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n# \
    \          «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n#         * compound\
    \ commands having a testable exit status, especially «case»;\n#         * various\
    \ built-in commands including «command», «set», and «ulimit».\n#\n#   Important\
    \ for patching:\n#\n#   (2) This script targets any POSIX shell, so it avoids\
    \ extensions provided\n#       by Bash, Ksh, etc; in particular arrays are avoided.\n\
    #\n#       The \"traditional\" practice of packing multiple parameters into a\n\
    #       space-separated string is a well documented source of bugs and security\n\
    #       problems, so this is (mostly) avoided, by progressively accumulating\n\
    #       options in \"$@\", and eventually passing that to Java.\n#\n#       Where\
    \ the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n#       and\
    \ GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n#      \
    \ see the in-line comments for details.\n#\n#       There are tweaks for specific\
    \ operating systems such as AIX, CygWin,\n#       Darwin, MinGW, and NonStop.\n\
    #\n#   (3) This script is generated from the Groovy template\n#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt\n\
    #       within the Gradle project.\n#\n#       You can find Gradle at https://github.com/gradle/gradle/.\n\
    #\n##############################################################################\n\
    \n# Attempt to set APP_HOME\n\n# Resolve links: $0 may be a link\napp_path=$0\n\
    \n# Need this for daisy-chained symlinks.\nwhile\n    APP_HOME=${app_path%\"${app_path##*/}\"\
    }  # leaves a trailing /; empty if no leading path\n    [ -h \"$app_path\" ]\n\
    do\n    ls=$( ls -ld \"$app_path\" )\n    link=${ls#*' -> '}\n    case $link in\
    \             #(\n      /*)   app_path=$link ;; #(\n      *)    app_path=$APP_HOME$link\
    \ ;;\n    esac\ndone\n\n# This is normally unused\n# shellcheck disable=SC2034\n\
    APP_BASE_NAME=${0##*/}\n# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)\n\
    APP_HOME=$( cd -P \"${APP_HOME:-./}\" > /dev/null && printf '%s\\n' \"$PWD\" )\
    \ || exit\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\n\
    MAX_FD=maximum\n\nwarn () {\n    echo \"$*\"\n} >&2\n\ndie () {\n    echo\n  \
    \  echo \"$*\"\n    echo\n    exit 1\n} >&2\n\n# OS specific support (must be\
    \ 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\n\
    case \"$( uname )\" in                #(\n  CYGWIN* )         cygwin=true  ;;\
    \ #(\n  Darwin* )         darwin=true  ;; #(\n  MSYS* | MINGW* )  msys=true  \
    \  ;; #(\n  NONSTOP* )        nonstop=true ;;\nesac\n\nCLASSPATH=\"\\\\\\\"\\\\\
    \\\"\"\n\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"\
    $JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n     \
    \   # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=$JAVA_HOME/jre/sh/java\n\
    \    else\n        JAVACMD=$JAVA_HOME/bin/java\n    fi\n    if [ ! -x \"$JAVACMD\"\
    \ ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\
    \nPlease set the JAVA_HOME variable in your environment to match the\nlocation\
    \ of your Java installation.\"\n    fi\nelse\n    JAVACMD=java\n    if ! command\
    \ -v java >/dev/null 2>&1\n    then\n        die \"ERROR: JAVA_HOME is not set\
    \ and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME\
    \ variable in your environment to match the\nlocation of your Java installation.\"\
    \n    fi\nfi\n\n# Increase the maximum file descriptors if we can.\nif ! \"$cygwin\"\
    \ && ! \"$darwin\" && ! \"$nonstop\" ; then\n    case $MAX_FD in #(\n      max*)\n\
    \        # In POSIX sh, ulimit -H is undefined. That's why the result is checked\
    \ to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        MAX_FD=$(\
    \ ulimit -H -n ) ||\n            warn \"Could not query maximum file descriptor\
    \ limit\"\n    esac\n    case $MAX_FD in  #(\n      '' | soft) :;; #(\n      *)\n\
    \        # In POSIX sh, ulimit -n is undefined. That's why the result is checked\
    \ to see if it worked.\n        # shellcheck disable=SC2039,SC3045\n        ulimit\
    \ -n \"$MAX_FD\" ||\n            warn \"Could not set maximum file descriptor\
    \ limit to $MAX_FD\"\n    esac\nfi\n\n# Collect all arguments for the java command,\
    \ stacking in reverse order:\n#   * args from the command line\n#   * the main\
    \ class name\n#   * -classpath\n#   * -D...appname settings\n#   * --module-path\
    \ (only if needed)\n#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment\
    \ variables.\n\n# For Cygwin or MSYS, switch paths to Windows format before running\
    \ java\nif \"$cygwin\" || \"$msys\" ; then\n    APP_HOME=$( cygpath --path --mixed\
    \ \"$APP_HOME\" )\n    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n\n\
    \    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n\n    # Now convert the arguments\
    \ - kludge to limit ourselves to /bin/sh\n    for arg do\n        if\n       \
    \     case $arg in                                #(\n              -*)   false\
    \ ;;                            # don't mess with options #(\n              /?*)\
    \  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath\n       \
    \             [ -e \"$t\" ] ;;                      #(\n              *)    false\
    \ ;;\n            esac\n        then\n            arg=$( cygpath --path --ignore\
    \ --mixed \"$arg\" )\n        fi\n        # Roll the args list around exactly\
    \ as many times as the number of\n        # args, so each arg winds up back in\
    \ the position where it started, but\n        # possibly modified.\n        #\n\
    \        # NB: a `for` loop captures its iteration list before it begins, so\n\
    \        # changing the positional parameters here affects neither the number\
    \ of\n        # iterations, nor the values presented in `arg`.\n        shift\
    \                   # remove old arg\n        set -- \"$@\" \"$arg\"      # push\
    \ replacement arg\n    done\nfi\n\n\n# Add default JVM options here. You can also\
    \ use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"\
    -Xmx64m\" \"-Xms64m\"'\n\n# Collect all arguments for the java command:\n#   *\
    \ DEFAULT_JVM_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain\
    \ shell fragments,\n#     and any embedded shellness will be escaped.\n#   * For\
    \ example: A user cannot expect ${Hostname} to be expanded, as it is an environment\
    \ variable and will be\n#     treated as '${Hostname}' itself on the command line.\n\
    \nset -- \\\n        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n        -classpath\
    \ \"$CLASSPATH\" \\\n        -jar \"$APP_HOME/gradle/wrapper/gradle-wrapper.jar\"\
    \ \\\n        \"$@\"\n\n# Stop when \"xargs\" is not available.\nif ! command\
    \ -v xargs >/dev/null 2>&1\nthen\n    die \"xargs is not available\"\nfi\n\n#\
    \ Use \"xargs\" to parse quoted args.\n#\n# With -n1 it outputs one arg per line,\
    \ with the quotes and backslashes removed.\n#\n# In Bash we could simply go:\n\
    #\n#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n#   set -- \"${ARGS[@]}\"\
    \ \"$@\"\n#\n# but POSIX shell has neither arrays nor command substitution, so\
    \ instead we\n# post-process each arg (as a line of input to sed) to backslash-escape\
    \ any\n# character that might be a shell metacharacter, then use eval to reverse\n\
    # that process (while maintaining the separation between arguments), and wrap\n\
    # the whole thing up as a single \"set\" statement.\n#\n# This will of course\
    \ break if any of these variables contains a newline or\n# an unmatched quote.\n\
    #\n\neval \"set -- $(\n        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\"\
    \ |\n        xargs -n1 |\n        sed ' s~[^-[:alnum:]+,./:=@_]~\\\\&~g; ' |\n\
    \        tr '\\n' ' '\n    )\" '\"$@\"'\n\nexec \"$JAVACMD\" \"$@\"\n"
  info:
    "size": "8733"
    "last_modified": "2025-07-15T12:57:12.36122"
    "mime_type": "application/x-sh"
    "extension": "."
- path: ".gitignore"
  content: "HELP.md\n.gradle\nbuild/\n!gradle/wrapper/gradle-wrapper.jar\n!**/src/main/**/build/\n\
    !**/src/test/**/build/\n\n### STS ###\n.apt_generated\n.classpath\n.factorypath\n\
    .project\n.settings\n.springBeans\n.sts4-cache\nbin/\n!**/src/main/**/bin/\n!**/src/test/**/bin/\n\
    \n### IntelliJ IDEA ###\n.idea\n*.iws\n*.iml\n*.ipr\nout/\n!**/src/main/**/out/\n\
    !**/src/test/**/out/\n\n### NetBeans ###\n/nbproject/private/\n/nbbuild/\n/dist/\n\
    /nbdist/\n/.nb-gradle/\n\n### VS Code ###\n.vscode/\n"
  info:
    "size": "444"
    "last_modified": "2025-07-15T12:57:12.363903"
    "mime_type": "text/plain"
    "extension": ".gitignore"
- path: "build.gradle"
  content: "plugins {\n\tid 'java'\n\tid 'org.springframework.boot' version '3.5.3'\n\
    \tid 'io.spring.dependency-management' version '1.1.7'\n}\n\ngroup   = 'com.example'\n\
    version = '0.0.1-SNAPSHOT'\nsourceCompatibility = '21'\n\nrepositories { mavenCentral()\
    \ }\n\ndependencies {\n\timplementation 'org.springframework.boot:spring-boot-starter-batch'\n\
    \timplementation 'org.springframework.boot:spring-boot-starter-data-jpa'\n\timplementation\
    \ 'org.springframework.boot:spring-boot-starter-web'\n\truntimeOnly   'com.h2database:h2'\n\
    \n\timplementation 'com.fasterxml.jackson.core:jackson-core'\n\timplementation\
    \ 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'\n\n\tcompileOnly  \
    \ 'org.projectlombok:lombok'\n\tannotationProcessor 'org.projectlombok:lombok'\n\
    \n\ttestImplementation 'org.springframework.boot:spring-boot-starter-test'\n\t\
    testImplementation 'org.springframework.batch:spring-batch-test'\n}\n\ntasks.named('test')\
    \ { useJUnitPlatform() }\n"
  info:
    "size": "903"
    "last_modified": "2025-07-15T12:57:12.366534"
    "mime_type": "text/plain"
    "extension": ".gradle"
- path: ".gitattributes"
  content: "/gradlew text eol=lf\n*.bat text eol=crlf\n*.jar binary\n"
  info:
    "size": "54"
    "last_modified": "2025-07-15T12:57:12.368978"
    "mime_type": "text/plain"
    "extension": ".gitattributes"
- path: "gradlew.bat"
  content: "@rem\r\n@rem Copyright 2015 the original author or authors.\r\n@rem\r\n\
    @rem Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@rem\
    \ you may not use this file except in compliance with the License.\r\n@rem You\
    \ may obtain a copy of the License at\r\n@rem\r\n@rem      https://www.apache.org/licenses/LICENSE-2.0\r\
    \n@rem\r\n@rem Unless required by applicable law or agreed to in writing, software\r\
    \n@rem distributed under the License is distributed on an \"AS IS\" BASIS,\r\n\
    @rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\
    \n@rem See the License for the specific language governing permissions and\r\n\
    @rem limitations under the License.\r\n@rem\r\n@rem SPDX-License-Identifier: Apache-2.0\r\
    \n@rem\r\n\r\n@if \"%DEBUG%\"==\"\" @echo off\r\n@rem ##########################################################################\r\
    \n@rem\r\n@rem  Gradle startup script for Windows\r\n@rem\r\n@rem ##########################################################################\r\
    \n\r\n@rem Set local scope for the variables with windows NT shell\r\nif \"%OS%\"\
    ==\"Windows_NT\" setlocal\r\n\r\nset DIRNAME=%~dp0\r\nif \"%DIRNAME%\"==\"\" set\
    \ DIRNAME=.\r\n@rem This is normally unused\r\nset APP_BASE_NAME=%~n0\r\nset APP_HOME=%DIRNAME%\r\
    \n\r\n@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.\r\nfor\
    \ %%i in (\"%APP_HOME%\") do set APP_HOME=%%~fi\r\n\r\n@rem Add default JVM options\
    \ here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this\
    \ script.\r\nset DEFAULT_JVM_OPTS=\"-Xmx64m\" \"-Xms64m\"\r\n\r\n@rem Find java.exe\r\
    \nif defined JAVA_HOME goto findJavaFromJavaHome\r\n\r\nset JAVA_EXE=java.exe\r\
    \n%JAVA_EXE% -version >NUL 2>&1\r\nif %ERRORLEVEL% equ 0 goto execute\r\n\r\n\
    echo. 1>&2\r\necho ERROR: JAVA_HOME is not set and no 'java' command could be\
    \ found in your PATH. 1>&2\r\necho. 1>&2\r\necho Please set the JAVA_HOME variable\
    \ in your environment to match the 1>&2\r\necho location of your Java installation.\
    \ 1>&2\r\n\r\ngoto fail\r\n\r\n:findJavaFromJavaHome\r\nset JAVA_HOME=%JAVA_HOME:\"\
    =%\r\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\r\n\r\nif exist \"%JAVA_EXE%\" goto\
    \ execute\r\n\r\necho. 1>&2\r\necho ERROR: JAVA_HOME is set to an invalid directory:\
    \ %JAVA_HOME% 1>&2\r\necho. 1>&2\r\necho Please set the JAVA_HOME variable in\
    \ your environment to match the 1>&2\r\necho location of your Java installation.\
    \ 1>&2\r\n\r\ngoto fail\r\n\r\n:execute\r\n@rem Setup the command line\r\n\r\n\
    set CLASSPATH=\r\n\r\n\r\n@rem Execute Gradle\r\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS%\
    \ %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath\
    \ \"%CLASSPATH%\" -jar \"%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\" %*\r\
    \n\r\n:end\r\n@rem End local scope for the variables with windows NT shell\r\n\
    if %ERRORLEVEL% equ 0 goto mainEnd\r\n\r\n:fail\r\nrem Set variable GRADLE_EXIT_CONSOLE\
    \ if you need the _script_ return code instead of\r\nrem the _cmd.exe /c_ return\
    \ code!\r\nset EXIT_CODE=%ERRORLEVEL%\r\nif %EXIT_CODE% equ 0 set EXIT_CODE=1\r\
    \nif not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\r\nexit /b %EXIT_CODE%\r\
    \n\r\n:mainEnd\r\nif \"%OS%\"==\"Windows_NT\" endlocal\r\n\r\n:omega\r\n"
  info:
    "size": "2937"
    "last_modified": "2025-07-15T12:57:12.375485"
    "mime_type": "application/x-bat"
    "extension": ".bat"
- path: "settings.gradle"
  content: "rootProject.name = 'drift'\n"
  info:
    "size": "27"
    "last_modified": "2025-07-15T12:57:12.378006"
    "mime_type": "text/plain"
    "extension": ".gradle"
- path: "data/redoak.trace.db"
  content: "2025-07-15 09:28:45.360852-07:00 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Function \"SYS_CONTEXT\" not found; SQL statement:\nselect cast('string' as\
    \ varchar2(32000)), sys_context('USERENV','CLOUD_SERVICE') from dual [90022-232]\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:644)\n\t\
    at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)\n\tat\
    \ org.h2.message.DbException.get(DbException.java:223)\n\tat org.h2.message.DbException.get(DbException.java:199)\n\
    \tat org.h2.command.Parser.readFunction(Parser.java:3772)\n\tat org.h2.command.Parser.readTermWithIdentifier(Parser.java:5142)\n\
    \tat org.h2.command.Parser.readTerm(Parser.java:4828)\n\tat org.h2.command.Parser.readFactor(Parser.java:3323)\n\
    \tat org.h2.command.Parser.readSum(Parser.java:3310)\n\tat org.h2.command.Parser.readConcat(Parser.java:3275)\n\
    \tat org.h2.command.Parser.readCondition(Parser.java:3065)\n\tat org.h2.command.Parser.readExpression(Parser.java:2985)\n\
    \tat org.h2.command.Parser.parseSelectExpressions(Parser.java:2785)\n\tat org.h2.command.Parser.parseSelect(Parser.java:2803)\n\
    \tat org.h2.command.Parser.parseQueryPrimary(Parser.java:2692)\n\tat org.h2.command.Parser.parseQueryTerm(Parser.java:2547)\n\
    \tat org.h2.command.Parser.parseQueryExpressionBody(Parser.java:2526)\n\tat org.h2.command.Parser.parseQueryExpressionBodyAndEndOfQuery(Parser.java:2519)\n\
    \tat org.h2.command.Parser.parseQueryExpression(Parser.java:2512)\n\tat org.h2.command.Parser.parseQuery(Parser.java:2479)\n\
    \tat org.h2.command.Parser.parsePrepared(Parser.java:610)\n\tat org.h2.command.Parser.parse(Parser.java:581)\n\
    \tat org.h2.command.Parser.parse(Parser.java:556)\n\tat org.h2.command.Parser.prepareCommand(Parser.java:484)\n\
    \tat org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:645)\n\tat org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:561)\n\
    \tat org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1164)\n\tat\
    \ org.h2.jdbc.JdbcStatement.executeQuery(JdbcStatement.java:94)\n\tat com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)\n\
    \tat com.zaxxer.hikari.pool.HikariProxyStatement.executeQuery(HikariProxyStatement.java)\n\
    \tat org.hibernate.dialect.OracleServerConfiguration.fromDialectResolutionInfo(OracleServerConfiguration.java:139)\n\
    \tat org.hibernate.dialect.OracleDialect.<init>(OracleDialect.java:213)\n\tat\
    \ java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)\n\
    \tat java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:502)\n\
    \tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:486)\n\
    \tat org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.lambda$constructDialect$0(DialectFactoryImpl.java:131)\n\
    \tat org.hibernate.boot.registry.selector.internal.StrategySelectorImpl.resolveStrategy(StrategySelectorImpl.java:240)\n\
    \tat org.hibernate.boot.registry.selector.internal.StrategySelectorImpl.resolveStrategy(StrategySelectorImpl.java:189)\n\
    \tat org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.constructDialect(DialectFactoryImpl.java:123)\n\
    \tat org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.buildDialect(DialectFactoryImpl.java:88)\n\
    \tat org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$1.execute(JdbcEnvironmentInitiator.java:369)\n\
    \tat org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$1.execute(JdbcEnvironmentInitiator.java:337)\n\
    \tat org.hibernate.jdbc.WorkExecutor.executeReturningWork(WorkExecutor.java:58)\n\
    \tat org.hibernate.jdbc.AbstractReturningWork.accept(AbstractReturningWork.java:34)\n\
    \tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcIsolationDelegate.delegateWork(JdbcIsolationDelegate.java:70)\n\
    \tat org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentUsingJdbcMetadata(JdbcEnvironmentInitiator.java:336)\n\
    \tat org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:129)\n\
    \tat org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:81)\n\
    \tat org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:130)\n\
    \tat org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)\n\
    \tat org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:238)\n\
    \tat org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:215)\n\
    \tat org.hibernate.boot.model.relational.Database.<init>(Database.java:45)\n\t\
    at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getDatabase(InFlightMetadataCollectorImpl.java:226)\n\
    \tat org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:194)\n\
    \tat org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:171)\n\
    \tat org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1442)\n\
    \tat org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1513)\n\
    \tat org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:66)\n\
    \tat org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:390)\n\
    \tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:419)\n\
    \tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:400)\n\
    \tat org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:366)\n\
    \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1873)\n\
    \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1822)\n\
    \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:607)\n\
    \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)\n\
    \tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)\n\
    \tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)\n\
    \tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)\n\
    \tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:207)\n\
    \tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:970)\n\
    \tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:627)\n\
    \tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)\n\
    \tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752)\n\
    \tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439)\n\
    \tat org.springframework.boot.SpringApplication.run(SpringApplication.java:318)\n\
    \tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1361)\n\
    \tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1350)\n\
    \tat com.edwardjones.drift.DriftApplication.main(DriftApplication.java:9)\n2025-07-15\
    \ 09:28:45.363930-07:00 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Function \"SYS_CONTEXT\" not found; SQL statement:\nselect 1 from dual where\
    \ sys_context('USERENV','CLOUD_SERVICE') in ('OLTP','DWCS','JDCS') [90022-232]\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:644)\n\t\
    at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)\n\tat\
    \ org.h2.message.DbException.get(DbException.java:223)\n\tat org.h2.message.DbException.get(DbException.java:199)\n\
    \tat org.h2.command.Parser.readFunction(Parser.java:3772)\n\tat org.h2.command.Parser.readTermWithIdentifier(Parser.java:5142)\n\
    \tat org.h2.command.Parser.readTerm(Parser.java:4828)\n\tat org.h2.command.Parser.readFactor(Parser.java:3323)\n\
    \tat org.h2.command.Parser.readSum(Parser.java:3310)\n\tat org.h2.command.Parser.readConcat(Parser.java:3275)\n\
    \tat org.h2.command.Parser.readCondition(Parser.java:3065)\n\tat org.h2.command.Parser.readExpressionWithGlobalConditions(Parser.java:2975)\n\
    \tat org.h2.command.Parser.parseSelect(Parser.java:2813)\n\tat org.h2.command.Parser.parseQueryPrimary(Parser.java:2692)\n\
    \tat org.h2.command.Parser.parseQueryTerm(Parser.java:2547)\n\tat org.h2.command.Parser.parseQueryExpressionBody(Parser.java:2526)\n\
    \tat org.h2.command.Parser.parseQueryExpressionBodyAndEndOfQuery(Parser.java:2519)\n\
    \tat org.h2.command.Parser.parseQueryExpression(Parser.java:2512)\n\tat org.h2.command.Parser.parseQuery(Parser.java:2479)\n\
    \tat org.h2.command.Parser.parsePrepared(Parser.java:610)\n\tat org.h2.command.Parser.parse(Parser.java:581)\n\
    \tat org.h2.command.Parser.parse(Parser.java:556)\n\tat org.h2.command.Parser.prepareCommand(Parser.java:484)\n\
    \tat org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:645)\n\tat org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:561)\n\
    \tat org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1164)\n\tat\
    \ org.h2.jdbc.JdbcStatement.executeQuery(JdbcStatement.java:94)\n\tat com.zaxxer.hikari.pool.ProxyStatement.executeQuery(ProxyStatement.java:111)\n\
    \tat com.zaxxer.hikari.pool.HikariProxyStatement.executeQuery(HikariProxyStatement.java)\n\
    \tat org.hibernate.dialect.OracleServerConfiguration.isAutonomous(OracleServerConfiguration.java:199)\n\
    \tat org.hibernate.dialect.OracleServerConfiguration.fromDialectResolutionInfo(OracleServerConfiguration.java:153)\n\
    \tat org.hibernate.dialect.OracleDialect.<init>(OracleDialect.java:213)\n\tat\
    \ java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)\n\
    \tat java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:502)\n\
    \tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:486)\n\
    \tat org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.lambda$constructDialect$0(DialectFactoryImpl.java:131)\n\
    \tat org.hibernate.boot.registry.selector.internal.StrategySelectorImpl.resolveStrategy(StrategySelectorImpl.java:240)\n\
    \tat org.hibernate.boot.registry.selector.internal.StrategySelectorImpl.resolveStrategy(StrategySelectorImpl.java:189)\n\
    \tat org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.constructDialect(DialectFactoryImpl.java:123)\n\
    \tat org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.buildDialect(DialectFactoryImpl.java:88)\n\
    \tat org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$1.execute(JdbcEnvironmentInitiator.java:369)\n\
    \tat org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$1.execute(JdbcEnvironmentInitiator.java:337)\n\
    \tat org.hibernate.jdbc.WorkExecutor.executeReturningWork(WorkExecutor.java:58)\n\
    \tat org.hibernate.jdbc.AbstractReturningWork.accept(AbstractReturningWork.java:34)\n\
    \tat org.hibernate.resource.transaction.backend.jdbc.internal.JdbcIsolationDelegate.delegateWork(JdbcIsolationDelegate.java:70)\n\
    \tat org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentUsingJdbcMetadata(JdbcEnvironmentInitiator.java:336)\n\
    \tat org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:129)\n\
    \tat org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:81)\n\
    \tat org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:130)\n\
    \tat org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)\n\
    \tat org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:238)\n\
    \tat org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:215)\n\
    \tat org.hibernate.boot.model.relational.Database.<init>(Database.java:45)\n\t\
    at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getDatabase(InFlightMetadataCollectorImpl.java:226)\n\
    \tat org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:194)\n\
    \tat org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:171)\n\
    \tat org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1442)\n\
    \tat org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1513)\n\
    \tat org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:66)\n\
    \tat org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:390)\n\
    \tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:419)\n\
    \tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:400)\n\
    \tat org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:366)\n\
    \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1873)\n\
    \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1822)\n\
    \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:607)\n\
    \tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)\n\
    \tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)\n\
    \tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)\n\
    \tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)\n\
    \tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:207)\n\
    \tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:970)\n\
    \tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:627)\n\
    \tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)\n\
    \tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752)\n\
    \tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439)\n\
    \tat org.springframework.boot.SpringApplication.run(SpringApplication.java:318)\n\
    \tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1361)\n\
    \tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1350)\n\
    \tat com.edwardjones.drift.DriftApplication.main(DriftApplication.java:9)\n"
  info:
    "size": "15621"
    "last_modified": "2025-07-15T12:57:12.380481"
    "mime_type": "text/plain"
    "extension": ".db"
- path: "src/test/resources/mock-groups.json"
  content: "[\n  {\n    \"groupName\": \"Speaking Engagement Submitters\",\n    \"\
    users\": [\n      {\n        \"name\": \"Allison Garey\",\n        \"emailAddress\"\
    : \"allison.garey@edwardjones.com\",\n        \"userName\": \"allison.garey\"\n\
    \      },\n      {\n        \"name\": \"Anand Nadgire\",\n        \"emailAddress\"\
    : \"AnandRajkumar.Nadgire@edwardjones.com\",\n        \"userName\": \"Anand.Nadgire\"\
    \n      },\n      {\n        \"name\": \"Bill Consoli\",\n        \"emailAddress\"\
    : \"Bill.Consoli@edwardjones.com\",\n        \"userName\": \"Bill.Consoli\"\n\
    \      },\n      {\n        \"name\": \"Cara Wrenn\",\n        \"emailAddress\"\
    : \"cara.wrenn@edwardjones.com\",\n        \"userName\": \"cara.wrenn\"\n    \
    \  },\n      {\n        \"name\": \"Christine Woznicki\",\n        \"emailAddress\"\
    : \"Christine.Woznicki@edwardjones.com\",\n        \"userName\": \"Christine.Woznicki\"\
    \n      },\n      {\n        \"name\": \"Dami Adegboyega\",\n        \"emailAddress\"\
    : \"Dami.Adegboyega@edwardjones.com\",\n        \"userName\": \"Dami.Adegboyega\"\
    \n      },\n      {\n        \"name\": \"David Hunter\",\n        \"emailAddress\"\
    : \"david.hunter@edwardjones.com\",\n        \"userName\": \"david.hunter\"\n\
    \      },\n      {\n        \"name\": \"Jignasha Solanki (P#)\",\n        \"emailAddress\"\
    : \"jignasha.solanki@edwardjones.com\",\n        \"userName\": \"jignasha.solanki\"\
    \n      },\n      {\n        \"name\": \"Jignasha US Field Submitter\",\n    \
    \    \"emailAddress\": \"jignasha.solanki@edwardjones.com\",\n        \"userName\"\
    : \"Test_USSubmitter1\"\n      },\n      {\n        \"name\": \"Kelly Recinos\"\
    ,\n        \"emailAddress\": \"kelly.lukasik@edwardjones.com\",\n        \"userName\"\
    : \"kelly.recinos\"\n      },\n      {\n        \"name\": \"Lisa Monachella\"\
    ,\n        \"emailAddress\": \"lisa.monachella@edwardjones.com\",\n        \"\
    userName\": \"lisa.monachella\"\n      },\n      {\n        \"name\": \"Mary Lou\
    \ Olton\",\n        \"emailAddress\": \"marylou.olton@edwardjones.com\",\n   \
    \     \"userName\": \"marylou.olton\"\n      },\n      {\n        \"name\": \"\
    Michael Davis (FA# 123)\",\n        \"emailAddress\": \"mdavis@redoakcompliance.com\"\
    ,\n        \"userName\": \"mdavis\"\n      },\n      {\n        \"name\": \"Michael\
    \ Moskowitz\",\n        \"emailAddress\": \"michael.moskowitz@edwardjones.com\"\
    ,\n        \"userName\": \"michael.moskowitz\"\n      },\n      {\n        \"\
    name\": \"Nathan Ganousis\",\n        \"emailAddress\": \"nathan.ganousis@edwardjones.com\"\
    ,\n        \"userName\": \"nathan.ganousis\"\n      },\n      {\n        \"name\"\
    : \"Nicholas Pieri\",\n        \"emailAddress\": \"nicholas.pieri@edwardjones.com\"\
    ,\n        \"userName\": \"nicholas.pieri\"\n      },\n      {\n        \"name\"\
    : \"Nicole Bascombe\",\n        \"emailAddress\": \"nicole.bascombe@edwardjones.com\"\
    ,\n        \"userName\": \"nicole.bascombe\"\n      },\n      {\n        \"name\"\
    : \"Nijat Burjiyev\",\n        \"emailAddress\": \"nijat.burjiyev@edwardjones.com\"\
    ,\n        \"userName\": \"nijat.burjiyev\"\n      },\n      {\n        \"name\"\
    : \"Preetham Parthasarathi\",\n        \"emailAddress\": \"preetham.parthasarathi@edwardjones.com\"\
    ,\n        \"userName\": \"preetham.parthasarathi\"\n      },\n      {\n     \
    \   \"name\": \"Shamarrie Wilson\",\n        \"emailAddress\": \"Shamarrie.Wilson@edwardjones.com\"\
    ,\n        \"userName\": \"Shamarrie.Wilson\"\n      },\n      {\n        \"name\"\
    : \"Steve Fraser\",\n        \"emailAddress\": \"steve.fraser@edwardjones.com\"\
    ,\n        \"userName\": \"steve.fraser\"\n      },\n      {\n        \"name\"\
    : \"Tapish Baronia\",\n        \"emailAddress\": \"Tapish.Baronia@edwardjones.com\"\
    ,\n        \"userName\": \"Tapish.Baronia\"\n      },\n      {\n        \"name\"\
    : \"Test Submitter\",\n        \"emailAddress\": \"Julia.Meder@edwardjones.com\"\
    ,\n        \"userName\": \"TestSubmitter_Julia\"\n      },\n      {\n        \"\
    name\": \"Test Submitter\",\n        \"emailAddress\": \"Jasmine.Turner@edwardjones.com\"\
    ,\n        \"userName\": \"TestSubmitter_Jasmine\"\n      },\n      {\n      \
    \  \"name\": \"Test Bernie Gapinski\",\n        \"emailAddress\": \"mdavis@redoakcompliance.com\"\
    ,\n        \"userName\": \"TEST_Gapinski,Bernie\"\n      },\n      {\n       \
    \ \"name\": \"Test Doug Cahill\",\n        \"emailAddress\": \"mdavis@redoakcompliance.com\"\
    ,\n        \"userName\": \"TEST_Cahill,Doug\"\n      },\n      {\n        \"name\"\
    : \"Test Kurt Stein (P126259)\",\n        \"emailAddress\": \"mdavis@redoakcompliance.com\"\
    ,\n        \"userName\": \"TEST_Stein,Kurt\"\n      },\n      {\n        \"name\"\
    : \"Test Roxanne McFadden\",\n        \"emailAddress\": \"mdavis@redoakcompliance.com\"\
    ,\n        \"userName\": \"TEST_McFadden,Roxanne\"\n      },\n      {\n      \
    \  \"name\": \"Test Samantha Cassidy\",\n        \"emailAddress\": \"mdavis@redoakcompliance.com\"\
    ,\n        \"userName\": \"TEST_Cassidy,Samantha\"\n      },\n      {\n      \
    \  \"name\": \"Test_BOA1 Test_BOA1\",\n        \"emailAddress\": \"mdavis@redoakcompliance.com\"\
    ,\n        \"userName\": \"Test_BOA1\"\n      },\n      {\n        \"name\": \"\
    Test_BOA2 Test_BOA2\",\n        \"emailAddress\": \"mdavis@redoakcompliance.com\"\
    ,\n        \"userName\": \"Test_BOA2\"\n      },\n      {\n        \"name\": \"\
    Test_BOA4 Test_BOA4\",\n        \"emailAddress\": \"mdavis@redoakcompliance.com\"\
    ,\n        \"userName\": \"Test_BOA4\"\n      },\n      {\n        \"name\": \"\
    Test_FA_RegionB Test_FA_RegionB\",\n        \"emailAddress\": \"mdavis@redoakcompliance.com\"\
    ,\n        \"userName\": \"Test_FA_RegionB\"\n      },\n      {\n        \"name\"\
    : \"Test_FA1 Test_FA1\",\n        \"emailAddress\": \"mdavis@redoakcompliance.com\"\
    ,\n        \"userName\": \"Test_FA1\"\n      },\n      {\n        \"name\": \"\
    Test_FA11 Test_FA11\",\n        \"emailAddress\": \"mdavis@redoakcompliance.com\"\
    ,\n        \"userName\": \"Test_FA11\"\n      },\n      {\n        \"name\": \"\
    Test_FA2 Test_FA2\",\n        \"emailAddress\": \"mdavis@redoakcompliance.com\"\
    ,\n        \"userName\": \"Test_FA2\"\n      },\n      {\n        \"name\": \"\
    TestUser1 FA\",\n        \"emailAddress\": \"mdavis@redoakcompliance.com\",\n\
    \        \"userName\": \"TestUser1\"\n      },\n      {\n        \"name\": \"\
    Thomas Moore\",\n        \"emailAddress\": \"thomas.moore@edwardjones.com\",\n\
    \        \"userName\": \"thomas.moore\"\n      },\n      {\n        \"name\":\
    \ \"Tracy Liu\",\n        \"emailAddress\": \"tracy.liu@edwardjones.com\",\n \
    \       \"userName\": \"tracy.liu\"\n      },\n      {\n        \"name\": \"Trentin\
    \ Diaz\",\n        \"emailAddress\": \"trentin.diaz@edwardjones.com\",\n     \
    \   \"userName\": \"trentin.diaz\"\n      },\n      {\n        \"name\": \"William\
    \ Lemon\",\n        \"emailAddress\": \"william.lemon@edwardjones.com\",\n   \
    \     \"userName\": \"william.lemon\"\n      },\n      {\n        \"name\": \"\
    Zachary Chervitz\",\n        \"emailAddress\": \"Zachary.Chervitz@edwardjones.com\"\
    ,\n        \"userName\": \"Zachary.Chervitz\"\n      }\n    ],\n    \"active\"\
    : true\n  },\n  {\n    \"groupName\": \"CRE Team\",\n    \"groupDescription\"\
    : \"Compliance Reviewers\",\n    \"users\": [\n      {\n        \"name\": \"Allison\
    \ Garey\",\n        \"emailAddress\": \"allison.garey@edwardjones.com\",\n   \
    \     \"userName\": \"allison.garey\"\n      },\n      {\n        \"name\": \"\
    Anand Nadgire\",\n        \"emailAddress\": \"AnandRajkumar.Nadgire@edwardjones.com\"\
    ,\n        \"userName\": \"Anand.Nadgire\"\n      },\n      {\n        \"name\"\
    : \"Bill Consoli\",\n        \"emailAddress\": \"Bill.Consoli@edwardjones.com\"\
    ,\n        \"userName\": \"Bill.Consoli\"\n      },\n      {\n        \"name\"\
    : \"Cara Wrenn\",\n        \"emailAddress\": \"cara.wrenn@edwardjones.com\",\n\
    \        \"userName\": \"cara.wrenn\"\n      },\n      {\n        \"name\": \"\
    Christine Woznicki\",\n        \"emailAddress\": \"Christine.Woznicki@edwardjones.com\"\
    ,\n        \"userName\": \"Christine.Woznicki\"\n      },\n      {\n        \"\
    name\": \"Dami Adegboyega\",\n        \"emailAddress\": \"Dami.Adegboyega@edwardjones.com\"\
    ,\n        \"userName\": \"Dami.Adegboyega\"\n      },\n      {\n        \"name\"\
    : \"David Hunter\",\n        \"emailAddress\": \"david.hunter@edwardjones.com\"\
    ,\n        \"userName\": \"david.hunter\"\n      },\n      {\n        \"name\"\
    : \"Jignasha Solanki (P#)\",\n        \"emailAddress\": \"jignasha.solanki@edwardjones.com\"\
    ,\n        \"userName\": \"jignasha.solanki\"\n      },\n      {\n        \"name\"\
    : \"Kelly Recinos\",\n        \"emailAddress\": \"kelly.lukasik@edwardjones.com\"\
    ,\n        \"userName\": \"kelly.recinos\"\n      },\n      {\n        \"name\"\
    : \"Lisa Monachella\",\n        \"emailAddress\": \"lisa.monachella@edwardjones.com\"\
    ,\n        \"userName\": \"lisa.monachella\"\n      },\n      {\n        \"name\"\
    : \"Mary Lou Olton\",\n        \"emailAddress\": \"marylou.olton@edwardjones.com\"\
    ,\n        \"userName\": \"marylou.olton\"\n      },\n      {\n        \"name\"\
    : \"Michael Davis (FA# 123)\",\n        \"emailAddress\": \"mdavis@redoakcompliance.com\"\
    ,\n        \"userName\": \"mdavis\"\n      },\n      {\n        \"name\": \"Michael\
    \ Moskowitz\",\n        \"emailAddress\": \"michael.moskowitz@edwardjones.com\"\
    ,\n        \"userName\": \"michael.moskowitz\"\n      },\n      {\n        \"\
    name\": \"Nathan Ganousis\",\n        \"emailAddress\": \"nathan.ganousis@edwardjones.com\"\
    ,\n        \"userName\": \"nathan.ganousis\"\n      },\n      {\n        \"name\"\
    : \"Nicholas Pieri\",\n        \"emailAddress\": \"nicholas.pieri@edwardjones.com\"\
    ,\n        \"userName\": \"nicholas.pieri\"\n      },\n      {\n        \"name\"\
    : \"Nicole Bascombe\",\n        \"emailAddress\": \"nicole.bascombe@edwardjones.com\"\
    ,\n        \"userName\": \"nicole.bascombe\"\n      },\n      {\n        \"name\"\
    : \"Nijat Burjiyev\",\n        \"emailAddress\": \"nijat.burjiyev@edwardjones.com\"\
    ,\n        \"userName\": \"nijat.burjiyev\"\n      },\n      {\n        \"name\"\
    : \"Preetham Parthasarathi\",\n        \"emailAddress\": \"preetham.parthasarathi@edwardjones.com\"\
    ,\n        \"userName\": \"preetham.parthasarathi\"\n      },\n      {\n     \
    \   \"name\": \"Shamarrie Wilson\",\n        \"emailAddress\": \"Shamarrie.Wilson@edwardjones.com\"\
    ,\n        \"userName\": \"Shamarrie.Wilson\"\n      },\n      {\n        \"name\"\
    : \"Steve Fraser\",\n        \"emailAddress\": \"steve.fraser@edwardjones.com\"\
    ,\n        \"userName\": \"steve.fraser\"\n      },\n      {\n        \"name\"\
    : \"Tapish Baronia\",\n        \"emailAddress\": \"Tapish.Baronia@edwardjones.com\"\
    ,\n        \"userName\": \"Tapish.Baronia\"\n      },\n      {\n        \"name\"\
    : \"Test US CRE Reviewer\",\n        \"emailAddress\": \"jignasha.solanki@edwardjones.com\"\
    ,\n        \"userName\": \"Test_USCRE1\"\n      },\n      {\n        \"name\"\
    : \"Test US_CRE_1\",\n        \"emailAddress\": \"tracy.liu@edwardjones.com\"\
    ,\n        \"userName\": \"US_CRE_1\"\n      },\n      {\n        \"name\": \"\
    Test US_CRE_2\",\n        \"emailAddress\": \"tracy.liu@edwardjones.com\",\n \
    \       \"userName\": \"US_CRE_2\"\n      },\n      {\n        \"name\": \"Test\
    \ US_CRE_3\",\n        \"emailAddress\": \"nijat.burjiyev@edwardjones.com\",\n\
    \        \"userName\": \"US_CRE_3\"\n      },\n      {\n        \"name\": \"Test\
    \ US_CRE_4\",\n        \"emailAddress\": \"nijat.burjiyev@edwardjones.com\",\n\
    \        \"userName\": \"US_CRE_4\"\n      },\n      {\n        \"name\": \"TestCRE1\
    \ CRE Reviewer\",\n        \"emailAddress\": \"mdavis@redoakcompliance.com\",\n\
    \        \"userName\": \"TestCRE1\"\n      },\n      {\n        \"name\": \"Thomas\
    \ Moore\",\n        \"emailAddress\": \"thomas.moore@edwardjones.com\",\n    \
    \    \"userName\": \"thomas.moore\"\n      },\n      {\n        \"name\": \"Tracy\
    \ Liu\",\n        \"emailAddress\": \"tracy.liu@edwardjones.com\",\n        \"\
    userName\": \"tracy.liu\"\n      },\n      {\n        \"name\": \"Trentin Diaz\"\
    ,\n        \"emailAddress\": \"trentin.diaz@edwardjones.com\",\n        \"userName\"\
    : \"trentin.diaz\"\n      },\n      {\n        \"name\": \"William Lemon\",\n\
    \        \"emailAddress\": \"william.lemon@edwardjones.com\",\n        \"userName\"\
    : \"william.lemon\"\n      },\n      {\n        \"name\": \"Zachary Chervitz\"\
    ,\n        \"emailAddress\": \"Zachary.Chervitz@edwardjones.com\",\n        \"\
    userName\": \"Zachary.Chervitz\"\n      }\n    ],\n    \"active\": true\n  }\n\
    ]"
  info:
    "size": "11076"
    "last_modified": "2025-07-15T12:57:12.387877"
    "mime_type": "text/plain"
    "extension": ".json"
- path: "src/test/resources/mock-users.json"
  content: "[\n  {\n    \"roles\": [\n      \"ADMIN\"\n    ],\n    \"active\": true,\n\
    \    \"groups\": [\n      {\n        \"active\": true,\n        \"groupName\"\
    : \"Red Oak Support\"\n      },\n      {\n        \"active\": true,\n        \"\
    groupName\": \"US Field Speaking Engagements Submitters\"\n      },\n      {\n\
    \        \"active\": true,\n        \"groupName\": \"US Field Speaking Engagements\
    \ CRE Team\"\n      },\n      {\n        \"active\": true,\n        \"groupName\"\
    : \"US Home Office Speaking Engagements Submitters\"\n      },\n      {\n    \
    \    \"active\": true,\n        \"groupName\": \"US Home Office Speaking Engagements\
    \ CRE Team\"\n      }\n    ],\n    \"locale\": \"en-\",\n    \"ssoOnly\": false,\n\
    \    \"lastName\": \"Berger\",\n    \"timeZone\": \"US/Pacific\",\n    \"userName\"\
    : \"aberger\",\n    \"firstName\": \"Aaron\",\n    \"adminRoles\": [\n      \"\
    RULES\",\n      \"QUESTIONS\",\n      \"COMPANIES\",\n      \"LEXICONS\",\n  \
    \    \"SITE_CONFIGURATION\",\n      \"VISIBILITY_PROFILES\",\n      \"SUBMISSION_TYPES\"\
    ,\n      \"COMMENT_TEMPLATES\",\n      \"GROUPS\",\n      \"FIELDSETS\",\n   \
    \   \"USERS\"\n    ],\n    \"landingPage\": \"DASHBOARD\",\n    \"emailAddress\"\
    : \"aberger@redoakcompliance.com\",\n    \"visibilityProfile\": \"View All\",\n\
    \    \"restrictByIpAddress\": false,\n    \"adminRolePermissions\": [\n      [\n\
    \        \"SITE_CONFIGURATION\",\n        \"EDIT\"\n      ],\n      [\n      \
    \  \"USERS\",\n        \"EDIT\"\n      ],\n      [\n        \"GROUPS\",\n    \
    \    \"EDIT\"\n      ],\n      [\n        \"QUESTIONS\",\n        \"EDIT\"\n \
    \     ],\n      [\n        \"FIELDSETS\",\n        \"EDIT\"\n      ],\n      [\n\
    \        \"SUBMISSION_TYPES\",\n        \"EDIT\"\n      ],\n      [\n        \"\
    COMPANIES\",\n        \"EDIT\"\n      ],\n      [\n        \"VISIBILITY_PROFILES\"\
    ,\n        \"EDIT\"\n      ],\n      [\n        \"LEXICONS\",\n        \"EDIT\"\
    \n      ],\n      [\n        \"COMMENT_TEMPLATES\",\n        \"EDIT\"\n      ],\n\
    \      [\n        \"RULES\",\n        \"EDIT\"\n      ],\n      [\n        \"\
    ENTITIES\",\n        \"NONE\"\n      ]\n    ]\n  },\n  {\n    \"roles\": [],\n\
    \    \"active\": true,\n    \"groups\": [\n      {\n        \"active\": true,\n\
    \        \"groupName\": \"Speaking Engagement Submitters\"\n      },\n      {\n\
    \        \"active\": true,\n        \"groupName\": \"CRE Team\"\n      },\n  \
    \    {\n        \"active\": true,\n        \"groupName\": \"US Field Speaking\
    \ Engagements Submitters\"\n      },\n      {\n        \"active\": true,\n   \
    \     \"groupName\": \"US Field Speaking Engagements CRE Team\"\n      },\n  \
    \    {\n        \"active\": true,\n        \"groupName\": \"US Home Office Speaking\
    \ Engagements Submitters\"\n      },\n      {\n        \"active\": true,\n   \
    \     \"groupName\": \"US Home Office Speaking Engagements CRE Team\"\n      }\n\
    \    ],\n    \"locale\": \"en-\",\n    \"ssoOnly\": false,\n    \"lastName\":\
    \ \"Garey\",\n    \"timeZone\": \"US/Eastern\",\n    \"userName\": \"allison.garey\"\
    ,\n    \"firstName\": \"Allison\",\n    \"adminRoles\": [],\n    \"landingPage\"\
    : \"DASHBOARD\",\n    \"emailAddress\": \"allison.garey@edwardjones.com\",\n \
    \   \"visibilityProfile\": \"View All\",\n    \"restrictByIpAddress\": false,\n\
    \    \"adminRolePermissions\": [\n      [\n        \"SITE_CONFIGURATION\",\n \
    \       \"NONE\"\n      ],\n      [\n        \"USERS\",\n        \"NONE\"\n  \
    \    ],\n      [\n        \"GROUPS\",\n        \"NONE\"\n      ],\n      [\n \
    \       \"QUESTIONS\",\n        \"NONE\"\n      ],\n      [\n        \"FIELDSETS\"\
    ,\n        \"NONE\"\n      ],\n      [\n        \"SUBMISSION_TYPES\",\n      \
    \  \"NONE\"\n      ],\n      [\n        \"COMPANIES\",\n        \"NONE\"\n   \
    \   ],\n      [\n        \"VISIBILITY_PROFILES\",\n        \"NONE\"\n      ],\n\
    \      [\n        \"LEXICONS\",\n        \"NONE\"\n      ],\n      [\n       \
    \ \"COMMENT_TEMPLATES\",\n        \"NONE\"\n      ],\n      [\n        \"RULES\"\
    ,\n        \"NONE\"\n      ],\n      [\n        \"ENTITIES\",\n        \"NONE\"\
    \n      ]\n    ]\n  }\n]"
  info:
    "size": "3546"
    "last_modified": "2025-07-15T12:57:12.390468"
    "mime_type": "text/plain"
    "extension": ".json"
- path: "src/test/resources/mock-visibility-profiles.json"
  content: "[\n  {\n    \"name\": \"View All\",\n    \"canOnlyViewInvolvedSubmissions\"\
    : false,\n    \"canViewAllSubmitterGroups\": true,\n    \"canViewAllSubmissionTypes\"\
    : true,\n    \"canSubmitOnBehalfOfSelf\": true,\n    \"onBehalfOfGroups\": [\n\
    \      {\n        \"groupName\": \"Speaking Engagement Submitters\",\n       \
    \ \"users\": [\n          {\n            \"name\": \"Allison Garey\",\n      \
    \      \"emailAddress\": \"allison.garey@edwardjones.com\",\n            \"userName\"\
    : \"allison.garey\"\n          },\n          {\n            \"name\": \"Anand\
    \ Nadgire\",\n            \"emailAddress\": \"AnandRajkumar.Nadgire@edwardjones.com\"\
    ,\n            \"userName\": \"Anand.Nadgire\"\n          },\n          {\n  \
    \          \"name\": \"Bill Consoli\",\n            \"emailAddress\": \"Bill.Consoli@edwardjones.com\"\
    ,\n            \"userName\": \"Bill.Consoli\"\n          },\n          {\n   \
    \         \"name\": \"Cara Wrenn\",\n            \"emailAddress\": \"cara.wrenn@edwardjones.com\"\
    ,\n            \"userName\": \"cara.wrenn\"\n          },\n          {\n     \
    \       \"name\": \"Christine Woznicki\",\n            \"emailAddress\": \"Christine.Woznicki@edwardjones.com\"\
    ,\n            \"userName\": \"Christine.Woznicki\"\n          },\n          {\n\
    \            \"name\": \"Dami Adegboyega\",\n            \"emailAddress\": \"\
    Dami.Adegboyega@edwardjones.com\",\n            \"userName\": \"Dami.Adegboyega\"\
    \n          },\n          {\n            \"name\": \"David Hunter\",\n       \
    \     \"emailAddress\": \"david.hunter@edwardjones.com\",\n            \"userName\"\
    : \"david.hunter\"\n          },\n          {\n            \"name\": \"Jignasha\
    \ Solanki (P#)\",\n            \"emailAddress\": \"jignasha.solanki@edwardjones.com\"\
    ,\n            \"userName\": \"jignasha.solanki\"\n          },\n          {\n\
    \            \"name\": \"Jignasha US Field Submitter\",\n            \"emailAddress\"\
    : \"jignasha.solanki@edwardjones.com\",\n            \"userName\": \"Test_USSubmitter1\"\
    \n          },\n          {\n            \"name\": \"Kelly Recinos\",\n      \
    \      \"emailAddress\": \"kelly.lukasik@edwardjones.com\",\n            \"userName\"\
    : \"kelly.recinos\"\n          },\n          {\n            \"name\": \"Lisa Monachella\"\
    ,\n            \"emailAddress\": \"lisa.monachella@edwardjones.com\",\n      \
    \      \"userName\": \"lisa.monachella\"\n          },\n          {\n        \
    \    \"name\": \"Mary Lou Olton\",\n            \"emailAddress\": \"marylou.olton@edwardjones.com\"\
    ,\n            \"userName\": \"marylou.olton\"\n          },\n          {\n  \
    \          \"name\": \"Michael Davis (FA# 123)\",\n            \"emailAddress\"\
    : \"mdavis@redoakcompliance.com\",\n            \"userName\": \"mdavis\"\n   \
    \       },\n          {\n            \"name\": \"Michael Moskowitz\",\n      \
    \      \"emailAddress\": \"michael.moskowitz@edwardjones.com\",\n            \"\
    userName\": \"michael.moskowitz\"\n          },\n          {\n            \"name\"\
    : \"Nathan Ganousis\",\n            \"emailAddress\": \"nathan.ganousis@edwardjones.com\"\
    ,\n            \"userName\": \"nathan.ganousis\"\n          },\n          {\n\
    \            \"name\": \"Nicholas Pieri\",\n            \"emailAddress\": \"nicholas.pieri@edwardjones.com\"\
    ,\n            \"userName\": \"nicholas.pieri\"\n          },\n          {\n \
    \           \"name\": \"Nicole Bascombe\",\n            \"emailAddress\": \"nicole.bascombe@edwardjones.com\"\
    ,\n            \"userName\": \"nicole.bascombe\"\n          },\n          {\n\
    \            \"name\": \"Nijat Burjiyev\",\n            \"emailAddress\": \"nijat.burjiyev@edwardjones.com\"\
    ,\n            \"userName\": \"nijat.burjiyev\"\n          },\n          {\n \
    \           \"name\": \"Preetham Parthasarathi\",\n            \"emailAddress\"\
    : \"preetham.parthasarathi@edwardjones.com\",\n            \"userName\": \"preetham.parthasarathi\"\
    \n          },\n          {\n            \"name\": \"Shamarrie Wilson\",\n   \
    \         \"emailAddress\": \"Shamarrie.Wilson@edwardjones.com\",\n          \
    \  \"userName\": \"Shamarrie.Wilson\"\n          },\n          {\n           \
    \ \"name\": \"Steve Fraser\",\n            \"emailAddress\": \"steve.fraser@edwardjones.com\"\
    ,\n            \"userName\": \"steve.fraser\"\n          },\n          {\n   \
    \         \"name\": \"Tapish Baronia\",\n            \"emailAddress\": \"Tapish.Baronia@edwardjones.com\"\
    ,\n            \"userName\": \"Tapish.Baronia\"\n          },\n          {\n \
    \           \"name\": \"Test Submitter\",\n            \"emailAddress\": \"Julia.Meder@edwardjones.com\"\
    ,\n            \"userName\": \"TestSubmitter_Julia\"\n          },\n         \
    \ {\n            \"name\": \"Test Submitter\",\n            \"emailAddress\":\
    \ \"Jasmine.Turner@edwardjones.com\",\n            \"userName\": \"TestSubmitter_Jasmine\"\
    \n          },\n          {\n            \"name\": \"Test Bernie Gapinski\",\n\
    \            \"emailAddress\": \"mdavis@redoakcompliance.com\",\n            \"\
    userName\": \"TEST_Gapinski,Bernie\"\n          },\n          {\n            \"\
    name\": \"Test Doug Cahill\",\n            \"emailAddress\": \"mdavis@redoakcompliance.com\"\
    ,\n            \"userName\": \"TEST_Cahill,Doug\"\n          },\n          {\n\
    \            \"name\": \"Test Kurt Stein (P126259)\",\n            \"emailAddress\"\
    : \"mdavis@redoakcompliance.com\",\n            \"userName\": \"TEST_Stein,Kurt\"\
    \n          },\n          {\n            \"name\": \"Test Roxanne McFadden\",\n\
    \            \"emailAddress\": \"mdavis@redoakcompliance.com\",\n            \"\
    userName\": \"TEST_McFadden,Roxanne\"\n          },\n          {\n           \
    \ \"name\": \"Test Samantha Cassidy\",\n            \"emailAddress\": \"mdavis@redoakcompliance.com\"\
    ,\n            \"userName\": \"TEST_Cassidy,Samantha\"\n          },\n       \
    \   {\n            \"name\": \"Test_BOA1 Test_BOA1\",\n            \"emailAddress\"\
    : \"mdavis@redoakcompliance.com\",\n            \"userName\": \"Test_BOA1\"\n\
    \          },\n          {\n            \"name\": \"Test_BOA2 Test_BOA2\",\n \
    \           \"emailAddress\": \"mdavis@redoakcompliance.com\",\n            \"\
    userName\": \"Test_BOA2\"\n          },\n          {\n            \"name\": \"\
    Test_BOA4 Test_BOA4\",\n            \"emailAddress\": \"mdavis@redoakcompliance.com\"\
    ,\n            \"userName\": \"Test_BOA4\"\n          },\n          {\n      \
    \      \"name\": \"Test_FA_RegionB Test_FA_RegionB\",\n            \"emailAddress\"\
    : \"mdavis@redoakcompliance.com\",\n            \"userName\": \"Test_FA_RegionB\"\
    \n          },\n          {\n            \"name\": \"Test_FA1 Test_FA1\",\n  \
    \          \"emailAddress\": \"mdavis@redoakcompliance.com\",\n            \"\
    userName\": \"Test_FA1\"\n          },\n          {\n            \"name\": \"\
    Test_FA11 Test_FA11\",\n            \"emailAddress\": \"mdavis@redoakcompliance.com\"\
    ,\n            \"userName\": \"Test_FA11\"\n          },\n          {\n      \
    \      \"name\": \"Test_FA2 Test_FA2\",\n            \"emailAddress\": \"mdavis@redoakcompliance.com\"\
    ,\n            \"userName\": \"Test_FA2\"\n          },\n          {\n       \
    \     \"name\": \"TestUser1 FA\",\n            \"emailAddress\": \"mdavis@redoakcompliance.com\"\
    ,\n            \"userName\": \"TestUser1\"\n          },\n          {\n      \
    \      \"name\": \"Thomas Moore\",\n            \"emailAddress\": \"thomas.moore@edwardjones.com\"\
    ,\n            \"userName\": \"thomas.moore\"\n          },\n          {\n   \
    \         \"name\": \"Tracy Liu\",\n            \"emailAddress\": \"tracy.liu@edwardjones.com\"\
    ,\n            \"userName\": \"tracy.liu\"\n          },\n          {\n      \
    \      \"name\": \"Trentin Diaz\",\n            \"emailAddress\": \"trentin.diaz@edwardjones.com\"\
    ,\n            \"userName\": \"trentin.diaz\"\n          },\n          {\n   \
    \         \"name\": \"William Lemon\",\n            \"emailAddress\": \"william.lemon@edwardjones.com\"\
    ,\n            \"userName\": \"william.lemon\"\n          },\n          {\n  \
    \          \"name\": \"Zachary Chervitz\",\n            \"emailAddress\": \"Zachary.Chervitz@edwardjones.com\"\
    ,\n            \"userName\": \"Zachary.Chervitz\"\n          }\n        ],\n \
    \       \"active\": true\n      }\n    ],\n    \"canViewSubmissionsForGroups\"\
    : [],\n    \"canViewSubmissionTypes\": [],\n    \"active\": true\n  },\n  {\n\
    \    \"name\": \"Basic FA Example - Team 1 - BOA\",\n    \"canOnlyViewInvolvedSubmissions\"\
    : false,\n    \"canViewAllSubmitterGroups\": false,\n    \"canViewAllSubmissionTypes\"\
    : false,\n    \"canSubmitOnBehalfOfSelf\": false,\n    \"onBehalfOfGroups\": [\n\
    \      {\n        \"groupName\": \"FAs\",\n        \"users\": [\n          {\n\
    \            \"name\": \"Michael Davis (FA# 123)\",\n            \"emailAddress\"\
    : \"mdavis@redoakcompliance.com\",\n            \"userName\": \"mdavis\"\n   \
    \       }\n        ],\n        \"active\": true\n      }\n    ],\n    \"canViewSubmissionsForGroups\"\
    : [\n      {\n        \"groupName\": \"Team 1 - FA\",\n        \"users\": [\n\
    \          {\n            \"name\": \"Michael Davis (FA# 123)\",\n           \
    \ \"emailAddress\": \"mdavis@redoakcompliance.com\",\n            \"userName\"\
    : \"mdavis\"\n          },\n          {\n            \"name\": \"Test_FA1 Test_FA1\"\
    ,\n            \"emailAddress\": \"mdavis@redoakcompliance.com\",\n          \
    \  \"userName\": \"Test_FA1\"\n          },\n          {\n            \"name\"\
    : \"Test_FA11 Test_FA11\",\n            \"emailAddress\": \"mdavis@redoakcompliance.com\"\
    ,\n            \"userName\": \"Test_FA11\"\n          }\n        ],\n        \"\
    active\": true\n      }\n    ],\n    \"canViewSubmissionTypes\": [\n      {\n\
    \        \"id\": 6362,\n        \"name\": \"Coffee Club Seminar Information Session\
    \ (US Field)\",\n        \"active\": true,\n        \"initialState\": \"Draft\"\
    ,\n        \"priority\": 0,\n        \"approvedStates\": [\n          \"Approved\"\
    ,\n          \"Completed\"\n        ],\n        \"formats\": [\n          \"Installation\
    \ Commander Approval Form\"\n        ],\n        \"description\": \"Coffee Club,\
    \ Seminar, or Information Session Speaking Engagement Submissions\",\n       \
    \ \"helpText\": \"<span id=\\\"isPasted\\\" style=\\\"font-size: 12pt;\\\">»<strong>Important</strong>:\
    \ <span style=\\\"background-color: rgb(251, 229, 113);\\\">Approval is required\
    \ <strong>before sending invitations and the event taking place</strong>.</span></span><br><br>Request\
    \ to obtain Compliance approval for a speaking engagement/seminar event.<ul><li>To\
    \ determine whether Speaking Engagement Approval is required or to read the instructions\
    \ for completing the form, review <a href=\\\"http://ejprod.sharepoint.com/sites/JL-US-BR-Compliance-and-Regulatory-Site/SitePages/WEB558367.aspx\\\
    \" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\"></a><span style=\\\"\
    color: rgb(36, 156, 184);\\\"><a href=\\\"http://ejprod.sharepoint.com/sites/JL-US-BR-Compliance-and-Regulatory-Site/SitePages/WEB558367.aspx\\\
    \" rel=\\\"noopener noreferrer\\\" target=\\\"_blank\\\"><strong>Obtaining Compliance\
    \ Approval for Marketing Events</strong></a></span>.</li><li>See Seminars: <a\
    \ href=\\\"http://ejprod.sharepoint.com/sites/JL-US-BR-Seminars-and-Speaking-Engagements/SitePages/WEB063073.aspx\\\
    \" rel=\\\"noopener noreferrer\\\" target=\\\"_blank\\\"><strong>Frequently Asked\
    \ Questions</strong></a> for more information.</li><li style=\\\"font-weight:\
    \ bold;\\\"><strong>Allow a minimum of 5 business days from the time your request\
    \ is submitted for your request to be reviewed. <em>This does not guarantee approval\
    \ will be provided</em>.</strong></li></ul><strong><span style=\\\"font-size:\
    \ 12pt;\\\">»Are you or your team presenting with any other Financial Advisors?</span></strong><ul><li>If\
    \ so, then ensure all presenters at Edward Jones are included within the On Behalf\
    \ Of field so they can see this submission for their record. <strong><br></strong></li></ul>\"\
    \n      }\n    ],\n    \"active\": true\n  }\n]"
  info:
    "size": "10848"
    "last_modified": "2025-07-15T12:57:12.392948"
    "mime_type": "text/plain"
    "extension": ".json"
- path: "src/test/java/com/edwardjones/drift/batch/ImportJobHappyPathTest.java"
  content: "package com.edwardjones.drift.batch;\n\nimport com.edwardjones.drift.repo.GroupRepository;\n\
    import com.edwardjones.drift.repo.UserRepository;\nimport com.edwardjones.drift.repo.VisibilityProfileRepository;\n\
    import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\
    import org.springframework.batch.core.JobParametersBuilder;\nimport org.springframework.batch.test.JobLauncherTestUtils;\n\
    import org.springframework.batch.test.context.SpringBatchTest;\nimport org.springframework.beans.factory.annotation.Autowired;\n\
    import org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.core.io.ClassPathResource;\n\
    import org.springframework.test.context.TestPropertySource;\nimport org.springframework.test.web.client.MockRestServiceServer;\n\
    import org.springframework.web.client.RestTemplate;\n\nimport java.nio.file.Files;\n\
    import java.nio.file.Paths;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\
    import static org.springframework.http.MediaType.APPLICATION_JSON;\nimport static\
    \ org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo;\n\
    import static org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess;\n\
    \n/**\n * Smallest–possible \"does-it-load?\" test.\n * – fakes the vendor endpoints\
    \ with MockRestServiceServer\n * – launches the Spring-Batch job once\n * – checks\
    \ that at least one row landed in each table\n */\n@SpringBootTest\n@SpringBatchTest\n\
    @TestPropertySource(properties = {\n        \"spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1\"\
    ,\n        \"spring.jpa.hibernate.ddl-auto=create-drop\",\n        \"spring.batch.job.enabled=false\"\
    \  // Disable automatic job execution\n})\nclass ImportJobHappyPathTest {\n\n\
    \    @Autowired private JobLauncherTestUtils jobLauncherTestUtils;\n    @Autowired\
    \ private RestTemplate            restTemplate;\n    @Autowired private UserRepository\
    \          users;\n    @Autowired private GroupRepository         groups;\n  \
    \  @Autowired private VisibilityProfileRepository vps;\n\n    private MockRestServiceServer\
    \ mockServer;\n\n    @BeforeEach\n    void wireMocks() throws Exception {\n  \
    \      mockServer = MockRestServiceServer.createServer(restTemplate);\n\n    \
    \    mockServer.expect(requestTo(\"https://api.redoak.example.com/getToken\"))\n\
    \                  .andRespond(withSuccess(\"{\\\"access_token\\\":\\\"test-token\\\
    \"}\", APPLICATION_JSON));\n\n        // Fix order to match job execution: users\
    \ -> submissionTypes -> groups -> visibilityProfiles\n        mockServer.expect(requestTo(\"\
    https://api.redoak.example.com/api/v1/users\"))\n                  .andRespond(withSuccess(read(\"\
    mock-users.json\"), APPLICATION_JSON));\n\n        mockServer.expect(requestTo(\"\
    https://api.redoak.example.com/api/v1/submissionTypes\"))\n                  .andRespond(withSuccess(\"\
    []\", APPLICATION_JSON));  // Empty array for PoC\n\n        mockServer.expect(requestTo(\"\
    https://api.redoak.example.com/api/v1/groups\"))\n                  .andRespond(withSuccess(read(\"\
    mock-groups.json\"), APPLICATION_JSON));\n\n        mockServer.expect(requestTo(\"\
    https://api.redoak.example.com/api/v1/visibilityProfiles\"))\n               \
    \   .andRespond(withSuccess(read(\"mock-visibility-profiles.json\"), APPLICATION_JSON));\n\
    \    }\n\n    @Test\n    void jobLoadsSomething() throws Exception {\n       \
    \ var params = new JobParametersBuilder()\n                .addLong(\"run.id\"\
    , System.currentTimeMillis())   // unique run\n                .toJobParameters();\n\
    \n        var exec = jobLauncherTestUtils.launchJob(params);\n        assertThat(exec.getExitStatus().getExitCode()).isEqualTo(\"\
    COMPLETED\");\n\n        assertThat(users.count()).isPositive();\n        assertThat(groups.count()).isPositive();\n\
    \        assertThat(vps.count()).isPositive();\n\n        mockServer.verify();\
    \           // all mocked calls were hit exactly once\n    }\n\n    /* helper\
    \ ─────────────────────────────────────────────────────────────── */\n    private\
    \ static String read(String classpathFile) throws Exception {\n        return\
    \ Files.readString(Paths.get(new ClassPathResource(classpathFile).getURI()));\n\
    \    }\n}\n"
  info:
    "size": "4164"
    "last_modified": "2025-07-15T12:57:12.397535"
    "mime_type": "text/x-java-source"
    "extension": ".java"
- path: "src/main/resources/vendor-root.pem"
  content: "-----BEGIN CERTIFICATE-----\nMIIC4jCCAcqgAwIBAgIJAO7eB7cI63s7MA0GCSqGSIb3DQEBBQUAMIGbMQswCQYD\n\
    VQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZyYW5j\naXNjbzENMAsGA1UEChMEQWNtZTENMAsGA1UECxMEQXBpczEXMBUGA1UEAwwOYXBp\n\
    LmV4YW1wbGUuY29tMSAwHgYJKoZIhvcNAQkBFhFhZG1pbkBleGFtcGxlLmNvbTAg\nFw0yNTAxMTUwMDAwMDBaGA8yMTI1MDExNTAwMDAwMFowgZsxCzAJBgNVBAYTAlVT\n\
    MRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1TYW4gRnJhbmNpc2NvMQ0w\nCwYDVQQKEwRBY21lMQ0wCwYDVQQLEwRBcGlzMRcwFQYDVQQDDA5hcGkuZXhhbXBs\n\
    ZS5jb20xIDAeBgkqhkiG9w0BCQEWEWFkbWluQGV4YW1wbGUuY29tMIIBIjANBgkq\nhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAx5a4g4z4v5p7Zg5hZ7Y/t8Z6Y4a4Y4e4\n\
    Z4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4\nY4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4\n\
    Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4\nY4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4\n\
    Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4\nY4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4\n\
    Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4\nY4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4\n\
    Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4\nY4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4\n\
    Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4\nY4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4\n\
    Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4\nY4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4\n\
    Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4\nY4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4\n\
    Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4\nY4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4\n\
    Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4\nY4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4\n\
    Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4\nY4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4\n\
    Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4\nY4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4\n\
    Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4\nY4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4\n\
    Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4\nY4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4\n\
    Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4\nY4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4\n\
    Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4Y4e4-\n-----END CERTIFICATE-----\n\
    \n"
  info:
    "size": "2644"
    "last_modified": "2025-07-15T12:57:12.412199"
    "mime_type": "application/x-x509-cert; format=pem"
    "extension": ".pem"
- path: "src/main/resources/application-dev.properties"
  content: "# Development profile - removes Oracle mode to eliminate SYS_CONTEXT warnings\n\
    spring.datasource.url=jdbc:h2:file:./data/redoak;DB_CLOSE_DELAY=-1;AUTO_SERVER=TRUE\n\
    \n# Suppress H2 Oracle compatibility warnings in development\nlogging.level.org.h2.engine.SysProperties=WARN\n\
    logging.level.org.h2.message.DbException=WARN\n"
  info:
    "size": "315"
    "last_modified": "2025-07-15T12:57:12.414611"
    "mime_type": "text/x-java-properties"
    "extension": ".properties"
- path: "src/main/resources/application.properties"
  content: "spring.application.name=drift\n\n# ??????????????????? Data source (Oracle?mode\
    \ H2, file) ???????????????????\nspring.datasource.url=jdbc:h2:file:./data/redoak;MODE=Oracle;DB_CLOSE_DELAY=-1;AUTO_SERVER=TRUE\n\
    spring.datasource.username=sa\nspring.datasource.password=\nspring.datasource.driver-class-name=org.h2.Driver\n\
    \n# Use H2 dialect in dev; switch to Oracle in a separate profile\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect\n\
    spring.jpa.hibernate.ddl-auto=update\nspring.jpa.show-sql=false\n\n# ???????????????????\
    \ Batch metadata tables ???????????????????\nspring.batch.jdbc.initialize-schema=always\n\
    \n# ??????????????????? H2 console (development only) ???????????????????\nspring.h2.console.enabled=true\n\
    spring.h2.console.path=/h2\n\n# ??????????????????? SSL Bundle for Vendor API\
    \ ???????????????????\nspring.ssl.bundle.vendor.truststore.type=PEM\nspring.ssl.bundle.vendor.truststore.location=classpath:vendor-root.pem\n"
  info:
    "size": "936"
    "last_modified": "2025-07-15T12:57:12.417184"
    "mime_type": "text/x-java-properties"
    "extension": ".properties"
- path: "src/main/java/com/edwardjones/drift/dto/UserJson.java"
  content: "package com.edwardjones.drift.dto;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\
    import java.util.List;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic\
    \ record UserJson(\n        String userName,\n        String firstName,\n    \
    \    String lastName,\n        String emailAddress,\n        boolean active,\n\
    \        String timeZone,\n        String locale,\n        String visibilityProfile,\n\
    \        List<String> roles,\n        List<String> adminRoles,\n        List<GroupRef>\
    \ groups,\n        String landingPage,\n        boolean restrictByIpAddress,\n\
    \        boolean ssoOnly,\n        List<List<String>> adminRolePermissions) {\n\
    \n    @JsonIgnoreProperties(ignoreUnknown = true)\n    public record GroupRef(String\
    \ groupName, boolean active) {}\n}\n"
  info:
    "size": "749"
    "last_modified": "2025-07-15T12:57:12.422001"
    "mime_type": "text/x-java-source"
    "extension": ".java"
- path: "src/main/java/com/edwardjones/drift/dto/GroupJson.java"
  content: "package com.edwardjones.drift.dto;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\
    import java.util.List;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic\
    \ record GroupJson(\n        String groupName,\n        String groupDescription,\n\
    \        boolean active,\n        List<UserRef> users) {\n\n    @JsonIgnoreProperties(ignoreUnknown\
    \ = true)\n    public record UserRef(String userName, String emailAddress, String\
    \ name) {}\n}\n"
  info:
    "size": "436"
    "last_modified": "2025-07-15T12:57:12.424532"
    "mime_type": "text/x-java-source"
    "extension": ".java"
- path: "src/main/java/com/edwardjones/drift/dto/VisibilityProfileJson.java"
  content: "package com.edwardjones.drift.dto;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\
    import java.util.List;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic\
    \ record VisibilityProfileJson(\n        String name,\n        boolean canOnlyViewInvolvedSubmissions,\n\
    \        boolean canViewAllSubmitterGroups,\n        boolean canViewAllSubmissionTypes,\n\
    \        boolean canSubmitOnBehalfOfSelf,\n        boolean active,\n        List<GroupWithUsers>\
    \ onBehalfOfGroups,\n        List<GroupWithUsers> canViewSubmissionsForGroups,\n\
    \        List<SubmissionTypeRef> canViewSubmissionTypes) {\n\n    @JsonIgnoreProperties(ignoreUnknown\
    \ = true)\n    public record GroupWithUsers(\n            String groupName,\n\
    \            boolean active,\n            List<UserRef> users) {\n\n        @JsonIgnoreProperties(ignoreUnknown\
    \ = true)\n        public record UserRef(String userName, String emailAddress,\
    \ String name) {}\n    }\n\n    @JsonIgnoreProperties(ignoreUnknown = true)\n\
    \    public record SubmissionTypeRef(\n            Long id,\n            String\
    \ name,\n            boolean active,\n            String initialState,\n     \
    \       int priority,\n            List<String> approvedStates,\n            List<String>\
    \ formats,\n            String description,\n            String helpText) {}\n\
    }\n"
  info:
    "size": "1265"
    "last_modified": "2025-07-15T12:57:12.426987"
    "mime_type": "text/x-java-source"
    "extension": ".java"
- path: "src/main/java/com/edwardjones/drift/dto/SubmissionTypeJson.java"
  content: "package com.edwardjones.drift.dto;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\
    import java.util.List;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic\
    \ record SubmissionTypeJson(\n        long id,\n        String name,\n       \
    \ boolean active,\n        String initialState,\n        int priority,\n     \
    \   List<String> approvedStates,\n        List<String> formats,\n        String\
    \ description,\n        String helpText) {}\n"
  info:
    "size": "436"
    "last_modified": "2025-07-15T12:57:12.429485"
    "mime_type": "text/x-java-source"
    "extension": ".java"
- path: "src/main/java/com/edwardjones/drift/infra/HttpConfig.java"
  content: "package com.edwardjones.drift.infra;\n\nimport org.springframework.boot.ssl.SslBundles;\n\
    import org.springframework.boot.web.client.RestTemplateBuilder;\nimport org.springframework.context.annotation.Bean;\n\
    import org.springframework.context.annotation.Configuration;\nimport org.springframework.web.client.RestTemplate;\n\
    \n@Configuration\nclass HttpConfig {\n\n    @Bean\n    RestTemplate vendorRestTemplate(RestTemplateBuilder\
    \ builder, SslBundles bundles) {\n        try {\n            return builder\n\
    \                    .sslBundle(bundles.getBundle(\"vendor\"))\n             \
    \       .build();\n        } catch (Exception e) {\n            // Fall back to\
    \ basic RestTemplate if SSL bundle is not available (e.g., in tests)\n       \
    \     return builder.build();\n        }\n    }\n}\n"
  info:
    "size": "760"
    "last_modified": "2025-07-15T12:57:12.433941"
    "mime_type": "text/x-java-source"
    "extension": ".java"
- path: "src/main/java/com/edwardjones/drift/infra/TokenService.java"
  content: "package com.edwardjones.drift.infra;\n\nimport org.springframework.http.*;\n\
    import org.springframework.stereotype.Component;\nimport org.springframework.web.client.RestTemplate;\n\
    import lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\n\n\
    import java.time.Instant;\nimport java.time.temporal.ChronoUnit;\n\n@Component\n\
    @RequiredArgsConstructor\n@Slf4j\npublic class TokenService {\n    private final\
    \ RestTemplate vendorRestTemplate;\n\n    // Token cache with expiration\n   \
    \ private volatile String cachedToken;\n    private volatile Instant tokenExpiry;\n\
    \    private final Object tokenLock = new Object();\n\n    public String fetchToken()\
    \ {\n        // Check if cached token is still valid\n        if (cachedToken\
    \ != null && tokenExpiry != null && Instant.now().isBefore(tokenExpiry)) {\n \
    \           log.debug(\"Using cached token (expires at: {})\", tokenExpiry);\n\
    \            return cachedToken;\n        }\n\n        synchronized (tokenLock)\
    \ {\n            // Double-check pattern - another thread might have refreshed\
    \ the token\n            if (cachedToken != null && tokenExpiry != null && Instant.now().isBefore(tokenExpiry))\
    \ {\n                return cachedToken;\n            }\n\n            log.debug(\"\
    Fetching new token from vendor API\");\n\n            // Retry logic for token\
    \ fetching\n            int maxRetries = 3;\n            for (int attempt = 1;\
    \ attempt <= maxRetries; attempt++) {\n                try {\n               \
    \     record TokenResponse(String access_token, Long expires_in) {}\n\n      \
    \              var tokenResponse = vendorRestTemplate.getForObject(\n        \
    \                \"https://api.redoak.example.com/getToken\", TokenResponse.class);\n\
    \n                    if (tokenResponse != null && tokenResponse.access_token()\
    \ != null) {\n                        cachedToken = tokenResponse.access_token();\n\
    \                        // Default to 1 hour if no expires_in provided, otherwise\
    \ use 90% of actual expiry\n                        long expirySeconds = tokenResponse.expires_in()\
    \ != null ?\n                            (long) (tokenResponse.expires_in() *\
    \ 0.9) : 3600;\n                        tokenExpiry = Instant.now().plus(expirySeconds,\
    \ ChronoUnit.SECONDS);\n\n                        log.debug(\"Token cached successfully\
    \ (expires at: {})\", tokenExpiry);\n                        return cachedToken;\n\
    \                    }\n\n                    log.warn(\"Received null or empty\
    \ token response on attempt {}\", attempt);\n                } catch (Exception\
    \ e) {\n                    log.warn(\"Failed to fetch token on attempt {} of\
    \ {}: {}\", attempt, maxRetries, e.getMessage());\n                    if (attempt\
    \ == maxRetries) {\n                        throw new IllegalStateException(\"\
    Failed to fetch access token after \" + maxRetries + \" attempts\", e);\n    \
    \                }\n\n                    // Brief pause before retry\n      \
    \              try {\n                        Thread.sleep(1000 * attempt); //\
    \ Exponential backoff\n                    } catch (InterruptedException ie) {\n\
    \                        Thread.currentThread().interrupt();\n               \
    \         throw new IllegalStateException(\"Token fetch interrupted\", ie);\n\
    \                    }\n                }\n            }\n\n            throw\
    \ new IllegalStateException(\"Failed to fetch access token from vendor API after\
    \ \" + maxRetries + \" attempts\");\n        }\n    }\n\n    // Method to clear\
    \ cache if needed (for testing or error recovery)\n    public void clearTokenCache()\
    \ {\n        synchronized (tokenLock) {\n            cachedToken = null;\n   \
    \         tokenExpiry = null;\n            log.debug(\"Token cache cleared\");\n\
    \        }\n    }\n}\n"
  info:
    "size": "3602"
    "last_modified": "2025-07-15T12:57:12.436351"
    "mime_type": "text/x-java-source"
    "extension": ".java"
- path: "src/main/java/com/edwardjones/drift/DriftApplication.java"
  content: "package com.edwardjones.drift;\n\nimport org.springframework.boot.SpringApplication;\n\
    import org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\n\
    public class DriftApplication {\n\tpublic static void main(String[] args) {\n\t\
    \tSpringApplication.run(DriftApplication.class, args);\n\t}\n}\n"
  info:
    "size": "310"
    "last_modified": "2025-07-15T12:57:12.440793"
    "mime_type": "text/x-java-source"
    "extension": ".java"
- path: "src/main/java/com/edwardjones/drift/batch/JobExecutionMonitor.java"
  content: "package com.edwardjones.drift.batch;\n\nimport lombok.extern.slf4j.Slf4j;\n\
    import org.springframework.batch.core.JobExecution;\nimport org.springframework.batch.core.JobExecutionListener;\n\
    import org.springframework.stereotype.Component;\n\n@Component\n@Slf4j\npublic\
    \ class JobExecutionMonitor implements JobExecutionListener {\n\n    @Override\n\
    \    public void beforeJob(JobExecution jobExecution) {\n        log.info(\"Starting\
    \ redoak-import job: {}\", jobExecution.getJobId());\n        log.info(\"Job parameters:\
    \ {}\", jobExecution.getJobParameters());\n    }\n\n    @Override\n    public\
    \ void afterJob(JobExecution jobExecution) {\n        log.info(\"Completed redoak-import\
    \ job: {} - Status: {}\",\n            jobExecution.getJobId(), jobExecution.getStatus());\n\
    \n        // Log step statistics\n        jobExecution.getStepExecutions().forEach(step\
    \ -> {\n            log.info(\"Step '{}' - Read: {}, Written: {}, Skipped: {}\"\
    ,\n                step.getStepName(), step.getReadCount(), step.getWriteCount(),\
    \ step.getSkipCount());\n        });\n\n        if (jobExecution.getStatus().isUnsuccessful())\
    \ {\n            log.error(\"Job failed with exit code: {}\", jobExecution.getExitStatus().getExitCode());\n\
    \        }\n    }\n}\n"
  info:
    "size": "1194"
    "last_modified": "2025-07-15T12:57:12.443218"
    "mime_type": "text/x-java-source"
    "extension": ".java"
- path: "src/main/java/com/edwardjones/drift/batch/JobConfig.java"
  content: "package com.edwardjones.drift.batch;\n\nimport com.edwardjones.drift.domain.*;\n\
    import com.edwardjones.drift.dto.*;\nimport com.edwardjones.drift.infra.TokenService;\n\
    import jakarta.persistence.EntityManagerFactory;\nimport lombok.RequiredArgsConstructor;\n\
    import org.springframework.batch.core.Job;\nimport org.springframework.batch.core.Step;\n\
    import org.springframework.batch.core.job.builder.JobBuilder;\nimport org.springframework.batch.core.repository.JobRepository;\n\
    import org.springframework.batch.core.step.builder.StepBuilder;\nimport org.springframework.batch.item.ItemProcessor;\n\
    import org.springframework.batch.item.ItemStreamReader;\nimport org.springframework.batch.item.database.JpaItemWriter;\n\
    import org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\
    import org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.web.client.RestTemplate;\n\
    \n@Configuration\n@RequiredArgsConstructor\npublic class JobConfig {\n\n    private\
    \ final JobRepository jobRepository;\n    private final PlatformTransactionManager\
    \ transactionManager;\n    private final EntityManagerFactory emf;\n    private\
    \ final RestTemplate rest;\n    private final TokenService token;\n    private\
    \ final JobExecutionMonitor jobExecutionMonitor;\n\n    /* ——— generic JPA writer\
    \ ——— */\n    @Bean\n    public <T> JpaItemWriter<T> jpaItemWriter() {\n     \
    \   var writer = new JpaItemWriter<T>();\n        writer.setEntityManagerFactory(emf);\n\
    \        writer.setUsePersist(false);  // Use merge() instead of persist() to\
    \ handle existing entities\n        return writer;\n    }\n\n    /* ——— readers\
    \ ——— */\n    @Bean\n    ItemStreamReader<UserJson> userReader() {\n        return\
    \ new RedOakStreamReader<>(UserJson.class,\n                \"https://api.redoak.example.com/api/v1/users\"\
    , rest, token);\n    }\n\n    @Bean\n    ItemStreamReader<GroupJson> groupReader()\
    \ {\n        return new RedOakStreamReader<>(GroupJson.class,\n              \
    \  \"https://api.redoak.example.com/api/v1/groups\", rest, token);\n    }\n\n\
    \    @Bean\n    ItemStreamReader<VisibilityProfileJson> vpReader() {\n       \
    \ return new RedOakStreamReader<>(VisibilityProfileJson.class,\n             \
    \   \"https://api.redoak.example.com/api/v1/visibilityProfiles\", rest, token);\n\
    \    }\n\n    @Bean\n    ItemStreamReader<SubmissionTypeJson> submissionTypeReader()\
    \ {\n        return new RedOakStreamReader<>(SubmissionTypeJson.class,\n     \
    \           \"https://api.redoak.example.com/api/v1/submissionTypes\", rest, token);\n\
    \    }\n\n    /* ——— steps ——— */\n    @Bean\n    Step loadUsers(ItemStreamReader<UserJson>\
    \ userReader,\n                   ItemProcessor<UserJson,User> userProcessor)\
    \ {\n        return new StepBuilder(\"loadUsers\", jobRepository)\n          \
    \      .<UserJson,User>chunk(1000, transactionManager)\n                .reader(userReader)\n\
    \                .processor(userProcessor)\n                .writer(jpaItemWriter())\n\
    \                .faultTolerant()\n                .retryLimit(3)\n          \
    \      .retry(Exception.class)\n                .skipLimit(10)\n             \
    \   .skip(Exception.class)\n                .build();\n    }\n\n    @Bean\n  \
    \  Step loadGroups(ItemStreamReader<GroupJson> groupReader,\n                \
    \    ItemProcessor<GroupJson,Group> groupProcessor) {\n        return new StepBuilder(\"\
    loadGroups\", jobRepository)\n                .<GroupJson,Group>chunk(500, transactionManager)\n\
    \                .reader(groupReader)\n                .processor(groupProcessor)\n\
    \                .writer(jpaItemWriter())\n                .faultTolerant()\n\
    \                .retryLimit(3)\n                .retry(Exception.class)\n   \
    \             .skipLimit(10)\n                .skip(Exception.class)\n       \
    \         .build();\n    }\n\n    @Bean\n    Step loadVPs(ItemStreamReader<VisibilityProfileJson>\
    \ vpReader,\n                 ItemProcessor<VisibilityProfileJson,VisibilityProfile>\
    \ vpProcessor) {\n        return new StepBuilder(\"loadVPs\", jobRepository)\n\
    \                .<VisibilityProfileJson,VisibilityProfile>chunk(250, transactionManager)\n\
    \                .reader(vpReader)\n                .processor(vpProcessor)\n\
    \                .writer(jpaItemWriter())\n                .faultTolerant()\n\
    \                .retryLimit(3)\n                .retry(Exception.class)\n   \
    \             .skipLimit(10)\n                .skip(Exception.class)\n       \
    \         .build();\n    }\n\n    @Bean\n    Step loadSubmissionTypes(ItemStreamReader<SubmissionTypeJson>\
    \ submissionTypeReader,\n                            ItemProcessor<SubmissionTypeJson,SubmissionType>\
    \ submissionTypeProcessor) {\n        return new StepBuilder(\"loadSubmissionTypes\"\
    , jobRepository)\n                .<SubmissionTypeJson,SubmissionType>chunk(500,\
    \ transactionManager)\n                .reader(submissionTypeReader)\n       \
    \         .processor(submissionTypeProcessor)\n                .writer(jpaItemWriter())\n\
    \                .faultTolerant()\n                .retryLimit(3)\n          \
    \      .retry(Exception.class)\n                .skipLimit(10)\n             \
    \   .skip(Exception.class)\n                .build();\n    }\n\n    /* ——— job\
    \ ——— */\n    @Bean\n    Job importJob(Step loadUsers, Step loadGroups, Step loadVPs,\
    \ Step loadSubmissionTypes) {\n        return new JobBuilder(\"redoak-import\"\
    , jobRepository)\n                   .listener(jobExecutionMonitor)  // Add job-level\
    \ monitoring\n                   .start(loadUsers)              // users first\n\
    \                   .next(loadSubmissionTypes)     // submission types before\
    \ VPs need them\n                   .next(loadGroups)              // groups can\
    \ now resolve users\n                   .next(loadVPs)                 // VPs\
    \ need both users and submission types\n                   .build();\n    }\n\
    }\n"
  info:
    "size": "5712"
    "last_modified": "2025-07-15T12:57:12.445635"
    "mime_type": "text/x-java-source"
    "extension": ".java"
- path: "src/main/java/com/edwardjones/drift/batch/UserProcessor.java"
  content: "package com.edwardjones.drift.batch;\n\nimport com.edwardjones.drift.domain.*;\n\
    import com.edwardjones.drift.dto.UserJson;\nimport com.edwardjones.drift.repo.VisibilityProfileRepository;\n\
    import lombok.RequiredArgsConstructor;\nimport org.springframework.batch.item.ItemProcessor;\n\
    import org.springframework.stereotype.Component;\n\nimport java.util.HashSet;\n\
    import java.util.List;\nimport java.util.Set;\n\n@Component\n@RequiredArgsConstructor\n\
    public class UserProcessor implements ItemProcessor<UserJson, User> {\n\n    private\
    \ final VisibilityProfileRepository vpRepo;\n\n    @Override\n    public User\
    \ process(UserJson json) {\n        User user = new User();\n        user.setUserName(json.userName());\n\
    \        user.setFirstName(json.firstName());\n        user.setLastName(json.lastName());\n\
    \        user.setEmailAddress(json.emailAddress());\n        user.setActive(json.active());\n\
    \        user.setTimeZone(json.timeZone());\n        user.setLocale(json.locale());\n\
    \        user.setLandingPage(json.landingPage());\n        user.setRestrictByIpAddress(json.restrictByIpAddress());\n\
    \        user.setSsoOnly(json.ssoOnly());\n\n        // Handle roles - convert\
    \ List to Set\n        if (json.roles() != null) {\n            user.setRoles(new\
    \ HashSet<>(json.roles()));\n        }\n\n        // Handle admin roles - convert\
    \ List to Set\n        if (json.adminRoles() != null) {\n            user.setAdminRoles(new\
    \ HashSet<>(json.adminRoles()));\n        }\n\n        // Handle admin role permissions\
    \ - flatten List<List<String>> to Set<String>\n        if (json.adminRolePermissions()\
    \ != null) {\n            Set<String> permissions = new HashSet<>();\n       \
    \     for (List<String> permissionPair : json.adminRolePermissions()) {\n    \
    \            if (permissionPair != null && permissionPair.size() >= 2) {\n   \
    \                 // Combine role and permission as \"ROLE:PERMISSION\"\n    \
    \                permissions.add(permissionPair.get(0) + \":\" + permissionPair.get(1));\n\
    \                }\n            }\n            user.setAdminRolePermissions(permissions);\n\
    \        }\n\n        // Link to visibility profile if it already exists\n   \
    \     if (json.visibilityProfile() != null) {\n            vpRepo.findById(json.visibilityProfile()).ifPresent(user::setVisibilityProfile);\n\
    \        }\n\n        // Don't handle group relationships here - let the groups\
    \ manage the relationships\n        // This avoids potential circular dependency\
    \ issues\n\n        return user;\n    }\n}\n"
  info:
    "size": "2421"
    "last_modified": "2025-07-15T12:57:12.448057"
    "mime_type": "text/x-java-source"
    "extension": ".java"
- path: "src/main/java/com/edwardjones/drift/batch/SubmissionTypeProcessor.java"
  content: "package com.edwardjones.drift.batch;\n\nimport com.edwardjones.drift.domain.SubmissionType;\n\
    import com.edwardjones.drift.dto.SubmissionTypeJson;\nimport org.springframework.batch.item.ItemProcessor;\n\
    import org.springframework.stereotype.Component;\n\nimport java.util.ArrayList;\n\
    \n@Component\npublic class SubmissionTypeProcessor implements ItemProcessor<SubmissionTypeJson,\
    \ SubmissionType> {\n\n    @Override\n    public SubmissionType process(SubmissionTypeJson\
    \ json) {\n        SubmissionType submissionType = new SubmissionType();\n   \
    \     submissionType.setId(json.id());\n        submissionType.setName(json.name());\n\
    \        submissionType.setDescription(json.description());\n        submissionType.setHelpText(json.helpText());\n\
    \        submissionType.setActive(json.active());\n        submissionType.setInitialState(json.initialState());\n\
    \        submissionType.setPriority(json.priority());\n\n        // Handle approved\
    \ states collection\n        if (json.approvedStates() != null) {\n          \
    \  submissionType.setApprovedStates(new ArrayList<>(json.approvedStates()));\n\
    \        }\n\n        // Handle formats collection\n        if (json.formats()\
    \ != null) {\n            submissionType.setFormats(new ArrayList<>(json.formats()));\n\
    \        }\n\n        return submissionType;\n    }\n}\n"
  info:
    "size": "1270"
    "last_modified": "2025-07-15T12:57:12.450569"
    "mime_type": "text/x-java-source"
    "extension": ".java"
- path: "src/main/java/com/edwardjones/drift/batch/VisibilityProfileProcessor.java"
  content: "package com.edwardjones.drift.batch;\n\nimport com.edwardjones.drift.domain.*;\n\
    import com.edwardjones.drift.dto.VisibilityProfileJson;\nimport com.edwardjones.drift.repo.GroupRepository;\n\
    import com.edwardjones.drift.repo.SubmissionTypeRepository;\nimport com.edwardjones.drift.repo.UserRepository;\n\
    import lombok.RequiredArgsConstructor;\nimport org.springframework.batch.item.ItemProcessor;\n\
    import org.springframework.stereotype.Component;\n\nimport java.util.HashSet;\n\
    import java.util.Set;\n\n@Component\n@RequiredArgsConstructor\npublic class VisibilityProfileProcessor\
    \ implements ItemProcessor<VisibilityProfileJson, VisibilityProfile> {\n\n   \
    \ private final GroupRepository groupRepository;\n    private final SubmissionTypeRepository\
    \ submissionTypeRepository;\n    private final UserRepository userRepository;\n\
    \n    @Override\n    public VisibilityProfile process(VisibilityProfileJson json)\
    \ {\n        VisibilityProfile vp = new VisibilityProfile();\n        vp.setName(json.name());\n\
    \        vp.setCanOnlyViewInvolvedSubmissions(json.canOnlyViewInvolvedSubmissions());\n\
    \        vp.setCanViewAllSubmitterGroups(json.canViewAllSubmitterGroups());\n\
    \        vp.setCanViewAllSubmissionTypes(json.canViewAllSubmissionTypes());\n\
    \        vp.setCanSubmitOnBehalfOfSelf(json.canSubmitOnBehalfOfSelf());\n    \
    \    vp.setActive(json.active());\n\n        // Handle on behalf of groups\n \
    \       if (json.onBehalfOfGroups() != null) {\n            Set<VpGroupLink> onBehalfOfGroups\
    \ = new HashSet<>();\n            for (VisibilityProfileJson.GroupWithUsers groupWithUsers\
    \ : json.onBehalfOfGroups()) {\n                VpGroupLink link = new VpGroupLink();\n\
    \                link.setVisibilityProfile(vp);\n                link.setGroupName(groupWithUsers.groupName());\n\
    \                link.setLinkType(\"ON_BEHALF_OF\");\n                link.setActive(groupWithUsers.active());\n\
    \                onBehalfOfGroups.add(link);\n            }\n            vp.setOnBehalfOfGroups(onBehalfOfGroups);\n\
    \        }\n\n        // Handle can view submissions for groups\n        if (json.canViewSubmissionsForGroups()\
    \ != null) {\n            Set<VpGroupLink> canViewGroups = new HashSet<>();\n\
    \            for (VisibilityProfileJson.GroupWithUsers groupWithUsers : json.canViewSubmissionsForGroups())\
    \ {\n                VpGroupLink link = new VpGroupLink();\n                link.setVisibilityProfile(vp);\n\
    \                link.setGroupName(groupWithUsers.groupName());\n            \
    \    link.setLinkType(\"CAN_VIEW\");\n                link.setActive(groupWithUsers.active());\n\
    \                canViewGroups.add(link);\n            }\n            vp.setCanViewSubmissionsForGroups(canViewGroups);\n\
    \        }\n\n        // Handle can view submission types\n        if (json.canViewSubmissionTypes()\
    \ != null) {\n            Set<SubmissionType> submissionTypes = new HashSet<>();\n\
    \            for (VisibilityProfileJson.SubmissionTypeRef typeRef : json.canViewSubmissionTypes())\
    \ {\n                submissionTypeRepository.findById(typeRef.id())\n       \
    \             .ifPresent(submissionTypes::add);\n            }\n            vp.setCanViewSubmissionTypes(submissionTypes);\n\
    \        }\n\n        return vp;\n    }\n}\n"
  info:
    "size": "3124"
    "last_modified": "2025-07-15T12:57:12.453089"
    "mime_type": "text/x-java-source"
    "extension": ".java"
- path: "src/main/java/com/edwardjones/drift/batch/GroupProcessor.java"
  content: "package com.edwardjones.drift.batch;\n\nimport com.edwardjones.drift.domain.Group;\n\
    import com.edwardjones.drift.domain.User;\nimport com.edwardjones.drift.dto.GroupJson;\n\
    import com.edwardjones.drift.repo.UserRepository;\nimport lombok.RequiredArgsConstructor;\n\
    import org.springframework.batch.item.ItemProcessor;\nimport org.springframework.stereotype.Component;\n\
    \nimport java.util.HashSet;\nimport java.util.Set;\n\n@Component\n@RequiredArgsConstructor\n\
    public class GroupProcessor implements ItemProcessor<GroupJson, Group> {\n\n \
    \   private final UserRepository userRepository;\n\n    @Override\n    public\
    \ Group process(GroupJson json) {\n        Group group = new Group();\n      \
    \  group.setGroupName(json.groupName());\n        group.setGroupDescription(json.groupDescription());\n\
    \        group.setActive(json.active());\n\n        // Handle user relationships\
    \ - find existing users and link them\n        if (json.users() != null && !json.users().isEmpty())\
    \ {\n            Set<User> users = new HashSet<>();\n            for (GroupJson.UserRef\
    \ userRef : json.users()) {\n                userRepository.findById(userRef.userName())\n\
    \                    .ifPresent(users::add);\n            }\n            group.setUsers(users);\n\
    \        }\n\n        return group;\n    }\n}\n"
  info:
    "size": "1245"
    "last_modified": "2025-07-15T12:57:12.455614"
    "mime_type": "text/x-java-source"
    "extension": ".java"
- path: "src/main/java/com/edwardjones/drift/batch/RedOakStreamReader.java"
  content: "package com.edwardjones.drift.batch;\n\nimport com.edwardjones.drift.infra.TokenService;\n\
    import com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.core.JsonToken;\n\
    import com.fasterxml.jackson.databind.ObjectMapper;\nimport lombok.RequiredArgsConstructor;\n\
    import lombok.extern.slf4j.Slf4j;\nimport org.springframework.batch.item.ExecutionContext;\n\
    import org.springframework.batch.item.ItemStreamReader;\nimport org.springframework.http.HttpEntity;\n\
    import org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpMethod;\n\
    import org.springframework.http.ResponseEntity;\nimport org.springframework.web.client.RestTemplate;\n\
    \nimport java.io.IOException;\n\n@Slf4j\n@RequiredArgsConstructor\npublic class\
    \ RedOakStreamReader<T> implements ItemStreamReader<T> {\n\n    private final\
    \ Class<T> targetType;\n    private final String url;\n    private final RestTemplate\
    \ restTemplate;\n    private final TokenService tokenService;\n    private final\
    \ ObjectMapper objectMapper = new ObjectMapper();\n\n    private JsonParser parser;\n\
    \    private boolean isOpen = false;\n\n    @Override\n    public void open(ExecutionContext\
    \ executionContext) {\n        try {\n            log.info(\"Opening RedOakStreamReader\
    \ for URL: {}\", url);\n\n            // Create headers with authentication token\n\
    \            HttpHeaders headers = new HttpHeaders();\n            headers.set(\"\
    Authorization\", \"Bearer \" + tokenService.fetchToken());\n            headers.set(\"\
    Accept\", \"application/json\");\n\n            HttpEntity<String> entity = new\
    \ HttpEntity<>(headers);\n\n            // Fix: Stream directly from HTTP response\
    \ to avoid loading entire JSON into memory\n            parser = restTemplate.execute(url,\
    \ HttpMethod.GET,\n                request -> {\n                    request.getHeaders().putAll(headers);\n\
    \                },\n                response -> {\n                    if (!response.getStatusCode().is2xxSuccessful())\
    \ {\n                        throw new IllegalStateException(\n              \
    \              String.format(\"HTTP request failed with status %s for URL: %s.\
    \ Headers: %s\",\n                                response.getStatusCode(), url,\
    \ response.getHeaders()));\n                    }\n                    // Create\
    \ parser directly from response stream\n                    return objectMapper.getFactory().createParser(response.getBody());\n\
    \                });\n\n            if (parser == null) {\n                throw\
    \ new IllegalStateException(\"Failed to create JSON parser for URL: \" + url);\n\
    \            }\n\n            // Position parser at START_ARRAY\n            JsonToken\
    \ token = parser.nextToken();\n\n            if (token != JsonToken.START_ARRAY)\
    \ {\n                throw new IllegalStateException(\n                    String.format(\"\
    Expected JSON array, but got %s from URL: %s\", token, url));\n            }\n\
    \n            isOpen = true;\n            log.debug(\"Successfully opened RedOakStreamReader\
    \ for {}\", url);\n\n        } catch (IOException e) {\n            throw new\
    \ IllegalStateException(\"Failed to parse JSON response from URL: \" + url, e);\n\
    \        } catch (Exception e) {\n            throw new IllegalStateException(\n\
    \                String.format(\"Failed to open RedOakStreamReader for URL: %s.\
    \ Error: %s\",\n                    url, e.getMessage()), e);\n        }\n   \
    \ }\n\n    @Override\n    public T read() {\n        if (!isOpen) {\n        \
    \    throw new IllegalStateException(\"RedOakStreamReader is not open\");\n  \
    \      }\n\n        try {\n            JsonToken token = parser.nextToken();\n\
    \n            if (token == JsonToken.END_ARRAY) {\n                // End of array\
    \ reached\n                return null;\n            }\n\n            if (token\
    \ == JsonToken.START_OBJECT) {\n                // Parse the current object\n\
    \                return objectMapper.readValue(parser, targetType);\n        \
    \    }\n\n            throw new IllegalStateException(\n                String.format(\"\
    Unexpected token %s while reading from URL: %s\", token, url));\n\n        } catch\
    \ (IOException e) {\n            throw new IllegalStateException(\n          \
    \      String.format(\"Failed to read JSON object from URL: %s\", url), e);\n\
    \        }\n    }\n\n    @Override\n    public void close() {\n        if (parser\
    \ != null) {\n            try {\n                parser.close();\n           \
    \     log.debug(\"Closed RedOakStreamReader for {}\", url);\n            } catch\
    \ (IOException e) {\n                log.warn(\"Error closing JSON parser for\
    \ URL: {}\", url, e);\n            }\n        }\n        isOpen = false;\n   \
    \ }\n\n    @Override\n    public void update(ExecutionContext executionContext)\
    \ {\n        // No-op - this is a stateless reader that doesn't need to persist\
    \ state\n        // The reader processes the entire JSON array in a single batch\
    \ job execution\n    }\n}\n"
  info:
    "size": "4723"
    "last_modified": "2025-07-15T12:57:12.458145"
    "mime_type": "text/x-java-source"
    "extension": ".java"
- path: "src/main/java/com/edwardjones/drift/domain/Group.java"
  content: "package com.edwardjones.drift.domain;\n\nimport jakarta.persistence.*;\n\
    import lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport lombok.ToString;\n\
    import java.util.Set;\n\n@Entity\n@Table(name = \"groups\")\n@Data\n@EqualsAndHashCode(exclude\
    \ = {\"users\"})\n@ToString(exclude = {\"users\"})\npublic class Group {\n   \
    \ @Id\n    @Column(name = \"group_name\")\n    private String groupName;\n\n \
    \   @Column(name = \"group_description\")\n    private String groupDescription;\n\
    \n    @Column(name = \"active\")\n    private boolean active;\n\n    @ManyToMany(cascade\
    \ = {CascadeType.PERSIST, CascadeType.MERGE}, fetch = FetchType.LAZY)\n    @JoinTable(\n\
    \        name = \"group_users\",\n        joinColumns = @JoinColumn(name = \"\
    group_name\"),\n        inverseJoinColumns = @JoinColumn(name = \"user_name\"\
    )\n    )\n    private Set<User> users;\n}\n"
  info:
    "size": "799"
    "last_modified": "2025-07-15T12:57:12.462664"
    "mime_type": "text/x-java-source"
    "extension": ".java"
- path: "src/main/java/com/edwardjones/drift/domain/VpGroupLink.java"
  content: "package com.edwardjones.drift.domain;\n\nimport jakarta.persistence.*;\n\
    import lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport lombok.ToString;\n\
    import java.io.Serializable;\n\n@Entity\n@Table(name = \"vp_group_links\")\n@Data\n\
    @EqualsAndHashCode(exclude = {\"visibilityProfile\"})\n@ToString(exclude = {\"\
    visibilityProfile\"})\n@IdClass(VpGroupLink.VpGroupId.class)\npublic class VpGroupLink\
    \ {\n\n    @Id\n    @Column(name = \"visibility_profile_name\")\n    private String\
    \ visibilityProfileName;\n\n    @Id\n    @Column(name = \"group_name\")\n    private\
    \ String groupName;\n\n    @Id\n    @Column(name = \"link_type\")\n    @Enumerated(EnumType.STRING)\n\
    \    private Role linkType;\n\n    @Column(name = \"active\")\n    private boolean\
    \ active;\n\n    @ManyToOne(fetch = FetchType.LAZY)\n    @JoinColumn(name = \"\
    visibility_profile_name\", insertable = false, updatable = false)\n    private\
    \ VisibilityProfile visibilityProfile;\n\n    // Convenience setter that accepts\
    \ String and converts to enum\n    public void setLinkType(String linkType) {\n\
    \        this.linkType = Role.valueOf(linkType);\n    }\n\n    // Convenience\
    \ setter that sets the visibility profile and updates the name\n    public void\
    \ setVisibilityProfile(VisibilityProfile vp) {\n        this.visibilityProfile\
    \ = vp;\n        this.visibilityProfileName = vp != null ? vp.getName() : null;\n\
    \    }\n\n    @Data\n    public static class VpGroupId implements Serializable\
    \ {\n        private String visibilityProfileName;\n        private String groupName;\n\
    \        private Role linkType;\n    }\n\n    public enum Role {\n        ON_BEHALF_OF,\n\
    \        CAN_VIEW\n    }\n}\n"
  info:
    "size": "1572"
    "last_modified": "2025-07-15T12:57:12.465091"
    "mime_type": "text/x-java-source"
    "extension": ".java"
- path: "src/main/java/com/edwardjones/drift/domain/User.java"
  content: "package com.edwardjones.drift.domain;\n\nimport jakarta.persistence.*;\n\
    import lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport lombok.ToString;\n\
    import java.util.Set;\n\n@Entity\n@Table(name = \"users\")\n@Data\n@EqualsAndHashCode(exclude\
    \ = {\"groups\", \"visibilityProfile\"})\n@ToString(exclude = {\"groups\", \"\
    visibilityProfile\"})\npublic class User {\n    @Id\n    @Column(name = \"user_name\"\
    )\n    private String userName;\n\n    @Column(name = \"first_name\")\n    private\
    \ String firstName;\n\n    @Column(name = \"last_name\")\n    private String lastName;\n\
    \n    @Column(name = \"email_address\")\n    private String emailAddress;\n\n\
    \    @Column(name = \"active\")\n    private boolean active;\n\n    @Column(name\
    \ = \"time_zone\")\n    private String timeZone;\n\n    @Column(name = \"locale\"\
    )\n    private String locale;\n\n    @Column(name = \"landing_page\")\n    private\
    \ String landingPage;\n\n    @Column(name = \"restrict_by_ip_address\")\n    private\
    \ boolean restrictByIpAddress;\n\n    @Column(name = \"sso_only\")\n    private\
    \ boolean ssoOnly;\n\n    @ElementCollection\n    @CollectionTable(name = \"user_roles\"\
    , joinColumns = @JoinColumn(name = \"user_name\"))\n    @Column(name = \"role\"\
    )\n    private Set<String> roles;\n\n    @ElementCollection\n    @CollectionTable(name\
    \ = \"user_admin_roles\", joinColumns = @JoinColumn(name = \"user_name\"))\n \
    \   @Column(name = \"admin_role\")\n    private Set<String> adminRoles;\n\n  \
    \  @ElementCollection\n    @CollectionTable(name = \"user_admin_role_permissions\"\
    , joinColumns = @JoinColumn(name = \"user_name\"))\n    @Column(name = \"permission\"\
    )\n    private Set<String> adminRolePermissions;\n\n    @ManyToMany(mappedBy =\
    \ \"users\", fetch = FetchType.LAZY)\n    private Set<Group> groups;\n\n    @ManyToOne(fetch\
    \ = FetchType.LAZY)\n    @JoinColumn(name = \"visibility_profile_name\")\n   \
    \ private VisibilityProfile visibilityProfile;\n}\n"
  info:
    "size": "1800"
    "last_modified": "2025-07-15T12:57:12.467538"
    "mime_type": "text/x-java-source"
    "extension": ".java"
- path: "src/main/java/com/edwardjones/drift/domain/SubmissionType.java"
  content: "package com.edwardjones.drift.domain;\n\nimport jakarta.persistence.*;\n\
    import lombok.Data;\nimport lombok.NoArgsConstructor;\nimport java.util.ArrayList;\n\
    import java.util.List;\n\n@Entity\n@Data\n@NoArgsConstructor\npublic class SubmissionType\
    \ {\n    @Id\n    private Long id;\n\n    private String name;\n\n    @Column(columnDefinition\
    \ = \"CLOB\")\n    private String description;\n\n    @Column(columnDefinition\
    \ = \"CLOB\")\n    private String helpText;\n\n    private boolean active;\n \
    \   private String initialState;\n    private int priority;\n\n    @ElementCollection\n\
    \    @CollectionTable(name = \"SUBMISSION_TYPE_STATES\",\n                   \
    \  joinColumns = @JoinColumn(name = \"submission_type_id\"))\n    private List<String>\
    \ approvedStates = new ArrayList<>();\n\n    @ElementCollection\n    @CollectionTable(name\
    \ = \"SUBMISSION_TYPE_FORMATS\",\n                     joinColumns = @JoinColumn(name\
    \ = \"submission_type_id\"))\n    private List<String> formats = new ArrayList<>();\n\
    }\n"
  info:
    "size": "949"
    "last_modified": "2025-07-15T12:57:12.469957"
    "mime_type": "text/x-java-source"
    "extension": ".java"
- path: "src/main/java/com/edwardjones/drift/domain/VisibilityProfile.java"
  content: "package com.edwardjones.drift.domain;\n\nimport jakarta.persistence.*;\n\
    import lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport lombok.ToString;\n\
    import java.util.Set;\n\n@Entity\n@Table(name = \"visibility_profiles\")\n@Data\n\
    @EqualsAndHashCode(exclude = {\"users\", \"onBehalfOfGroups\", \"canViewSubmissionsForGroups\"\
    , \"canViewSubmissionTypes\"})\n@ToString(exclude = {\"users\", \"onBehalfOfGroups\"\
    , \"canViewSubmissionsForGroups\", \"canViewSubmissionTypes\"})\npublic class\
    \ VisibilityProfile {\n    @Id\n    @Column(name = \"name\")\n    private String\
    \ name;\n\n    @Column(name = \"can_only_view_involved_submissions\")\n    private\
    \ boolean canOnlyViewInvolvedSubmissions;\n\n    @Column(name = \"can_view_all_submitter_groups\"\
    )\n    private boolean canViewAllSubmitterGroups;\n\n    @Column(name = \"can_view_all_submission_types\"\
    )\n    private boolean canViewAllSubmissionTypes;\n\n    @Column(name = \"can_submit_on_behalf_of_self\"\
    )\n    private boolean canSubmitOnBehalfOfSelf;\n\n    @Column(name = \"active\"\
    )\n    private boolean active;\n\n    @OneToMany(mappedBy = \"visibilityProfile\"\
    , cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    private Set<User> users;\n\
    \n    @OneToMany(mappedBy = \"visibilityProfile\", cascade = CascadeType.ALL,\
    \ fetch = FetchType.LAZY)\n    private Set<VpGroupLink> onBehalfOfGroups;\n\n\
    \    @OneToMany(mappedBy = \"visibilityProfile\", cascade = CascadeType.ALL, fetch\
    \ = FetchType.LAZY)\n    private Set<VpGroupLink> canViewSubmissionsForGroups;\n\
    \n    @ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch =\
    \ FetchType.LAZY)\n    @JoinTable(\n        name = \"visibility_profile_submission_types\"\
    ,\n        joinColumns = @JoinColumn(name = \"visibility_profile_name\"),\n  \
    \      inverseJoinColumns = @JoinColumn(name = \"submission_type_id\")\n    )\n\
    \    private Set<SubmissionType> canViewSubmissionTypes;\n}\n"
  info:
    "size": "1800"
    "last_modified": "2025-07-15T12:57:12.472388"
    "mime_type": "text/x-java-source"
    "extension": ".java"
- path: "src/main/java/com/edwardjones/drift/repo/SubmissionTypeRepository.java"
  content: "package com.edwardjones.drift.repo;\n\nimport com.edwardjones.drift.domain.SubmissionType;\n\
    import org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface\
    \ SubmissionTypeRepository extends JpaRepository<SubmissionType, Long> {\n}\n"
  info:
    "size": "242"
    "last_modified": "2025-07-15T12:57:12.476764"
    "mime_type": "text/x-java-source"
    "extension": ".java"
- path: "src/main/java/com/edwardjones/drift/repo/VisibilityProfileRepository.java"
  content: "package com.edwardjones.drift.repo;\n\nimport com.edwardjones.drift.domain.VisibilityProfile;\n\
    import org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface\
    \ VisibilityProfileRepository extends JpaRepository<VisibilityProfile, String>\
    \ {\n}\n"
  info:
    "size": "253"
    "last_modified": "2025-07-15T12:57:12.479134"
    "mime_type": "text/x-java-source"
    "extension": ".java"
- path: "src/main/java/com/edwardjones/drift/repo/GroupRepository.java"
  content: "package com.edwardjones.drift.repo;\n\nimport com.edwardjones.drift.domain.Group;\n\
    import org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface\
    \ GroupRepository extends JpaRepository<Group, String> {\n}\n"
  info:
    "size": "217"
    "last_modified": "2025-07-15T12:57:12.481488"
    "mime_type": "text/x-java-source"
    "extension": ".java"
- path: "src/main/java/com/edwardjones/drift/repo/UserRepository.java"
  content: "package com.edwardjones.drift.repo;\n\nimport com.edwardjones.drift.domain.User;\n\
    import org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface\
    \ UserRepository extends JpaRepository<User, String> {\n}\n"
  info:
    "size": "214"
    "last_modified": "2025-07-15T12:57:12.483814"
    "mime_type": "text/x-java-source"
    "extension": ".java"